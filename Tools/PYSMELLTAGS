{'CLASSES': {'Tools.Analysis.Analysis': {'bases': ['object'],
                                         'constructor': ['subject', 'project', 'sessions'],
                                         'docstring': 'docstring for analysis',
                                         'methods': [],
                                         'properties': ['subjects', 'project', 'sessions']},
             'Tools.Operators.ArrayOperator.ArrayOperator': {'bases': ['Tools.Operators.ArrayOperator.Operator'],
                                                             'constructor': ['inputObject',
                                                                             '**kwargs'],
                                                             'docstring': '\n\tDataOperator takes in numpy arrays or \n\tnumpy data files and runs analysis on these. \n\tExamples are time-course and event-based data analysis like deconvolution and event-related averages.\n\t',
                                                             'methods': [],
                                                             'properties': ['dataArray',
                                                                            'inputShape']},
             'Tools.Operators.ArrayOperator.DeconvolutionOperator': {'bases': ['Tools.Operators.ArrayOperator.EventDataOperator'],
                                                                     'constructor': ['inputObject',
                                                                                     'eventObject',
                                                                                     'TR=2.0',
                                                                                     'deconvolutionSampleDuration=0.5',
                                                                                     'deconvolutionInterval=12.0',
                                                                                     'run=True',
                                                                                     '**kwargs'],
                                                                     'docstring': 'docstring for DeconvolutionOperator',
                                                                     'methods': [('upsampleDataTimeSeries',
                                                                                  [],
                                                                                  'upsampleDataTimeSeries takes a timeseries of data points\n\t\t and upsamples them according to \n\t\tthe ratio between TR and deconvolutionSampleDuration.'),
                                                                                 ('designMatrixFromVector',
                                                                                  ['eventTimesVector'],
                                                                                  'designMatrixFromVector creates a deconvolution design matrix from \n\t\tan event vector. To do this, it rounds the event times to the nearest \n\t\tdeconvolutionSampleDuration interval and thus discretizes them. \n\t\tAfterwards, it creates a matrix by shifting the discretized array\n\t\tnrSamplesInInterval times. '),
                                                                                 ('createDesignMatrix',
                                                                                  [],
                                                                                  'createDesignMatrix takes the event times array \n\t\tand creates a design timecourse matrix\n\t\tby discretizing the events per deconvolutionSampleDuration period.'),
                                                                                 ('h',
                                                                                  [],
                                                                                  '\n\t\trun the actual deconvolution least-squares approximation\n\t\t'),
                                                                                 ('runWithConvolvedNuisanceVectors',
                                                                                  ['nuisanceVectors'],
                                                                                  ''),
                                                                                 ('residuals',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['deconvolutionSampleDuration',
                                                                                    'deconvolutionInterval',
                                                                                    'ratio',
                                                                                    'nrSamplesInInterval',
                                                                                    'rawDeconvolvedTimeCourse',
                                                                                    'deconvolvedTimeCoursesPerEventType',
                                                                                    'workingDataArray',
                                                                                    'designMatrix',
                                                                                    'newDesignMatrix',
                                                                                    'deconvolvedTimeCoursesNuisanceAll',
                                                                                    'deconvolvedTimeCoursesPerEventTypeNuisance',
                                                                                    'deconvolvedNuisanceBetas',
                                                                                    'residuals']},
             'Tools.Operators.ArrayOperator.EventDataOperator': {'bases': ['Tools.Operators.ArrayOperator.ArrayOperator'],
                                                                 'constructor': ['inputObject',
                                                                                 'eventObject',
                                                                                 'TR=2.0',
                                                                                 '**kwargs'],
                                                                 'docstring': 'docstring for EventDataOperator',
                                                                 'methods': [],
                                                                 'properties': ['eventObject',
                                                                                'eventArray',
                                                                                'TR']},
             'Tools.Operators.ArrayOperator.EventRelatedAverageOperator': {'bases': ['Tools.Operators.ArrayOperator.EventDataOperator'],
                                                                           'constructor': ['inputObject',
                                                                                           'eventObject',
                                                                                           'TR=2.0',
                                                                                           'interval=[-5.0, 21.0]',
                                                                                           '**kwargs'],
                                                                           'docstring': 'Event related averages for all voxel/ROI elements in the input data array.\n\tIn most cases, one can save time by averaging across voxels before construction.',
                                                                           'methods': [('prepareEventData',
                                                                                        [],
                                                                                        ''),
                                                                                       ('averageEventsInTimeInterval',
                                                                                        ['averagingInterval',
                                                                                         'output_raw_data=False'],
                                                                                        ''),
                                                                                       ('run',
                                                                                        ['binWidth=2.0',
                                                                                         'stepSize=0.5',
                                                                                         'output_raw_data=False'],
                                                                                        '')],
                                                                           'properties': ['interval',
                                                                                          'intervalInTRs',
                                                                                          'intervalRange',
                                                                                          'TRTimes',
                                                                                          'selectedEventArray',
                                                                                          'eventSampleTimes',
                                                                                          'eventData',
                                                                                          'averagingIntervals',
                                                                                          'output']},
             'Tools.Operators.BehaviorOperator.ApparentMotionBehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.BehaviorOperator'],
                                                                                 'constructor': ['inputObject',
                                                                                                 '**kwargs'],
                                                                                 'docstring': '\n\tThis behavior operator parses the outputs of by own AM behavioral output format in order to take out event timings.\n\t',
                                                                                 'methods': [('openData',
                                                                                              [],
                                                                                              'docstring for openData'),
                                                                                             ('separateEventsFromData',
                                                                                              ['reactionTime=0.4',
                                                                                               'timeRange=[10, 130]'],
                                                                                              'docstring for separateEventsFromData')],
                                                                                 'properties': ['rawData',
                                                                                                'parameters',
                                                                                                'rawEvents',
                                                                                                'buttonEvents',
                                                                                                'TREvents',
                                                                                                'rivalryButtonEvents',
                                                                                                'rivalryButtonPeriods',
                                                                                                'rivalryPeriods',
                                                                                                'percepts',
                                                                                                'yokedPeriods']},
             'Tools.Operators.BehaviorOperator.BehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.Operator'],
                                                                   'constructor': ['inputObject',
                                                                                   '**kwargs'],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['inputFileName']},
             'Tools.Operators.BehaviorOperator.DisparityLocalizerBehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.RivalryLearningBehaviorOperator'],
                                                                                     'constructor': ['inputObject',
                                                                                                     '**kwargs'],
                                                                                     'docstring': '',
                                                                                     'methods': [('separateConditions',
                                                                                                  [],
                                                                                                  '\n\t\tSeparate conditions and timings in the m-seq design. \n\t\tCorrelate responses to stimulus presentations\n\t\t'),
                                                                                                 ('joinResponsesAndStimPresentations',
                                                                                                  ['disparityEvents',
                                                                                                   'buttonDownEvents',
                                                                                                   'responseInterval=[0.5, 2.0]'],
                                                                                                  'docstring for joinResponsesAndStimPresentations'),
                                                                                                 ('analyzePsychophysics',
                                                                                                  ["noAnswerBehavior='disregard'"],
                                                                                                  "\n\t\tanalyze this run's psychopysics.\n\t\ttakes together the input event times and searches button presses that are likely to belong to it\n\t\tthen creates raw trial data and average trial data, and then fits the thing\n\t\tnoAnswerBehavior argument can be 'disregard' or 'asChanceAnswer'\n\t\t"),
                                                                                                 ('fitPC',
                                                                                                  ['plot=True'],
                                                                                                  'invoke pypsignifit for fitting psychometric curves')],
                                                                                     'properties': ['disparityEvents',
                                                                                                    'disparities',
                                                                                                    'buttonDownEvents',
                                                                                                    'inputEventTimes',
                                                                                                    'stimResponsePairs',
                                                                                                    'stimResponsePairsAllAnswers',
                                                                                                    'answersPerStimulusValue',
                                                                                                    'meanAnswersPerStimulusValue',
                                                                                                    'fit']},
             'Tools.Operators.BehaviorOperator.NewBehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.BehaviorOperator'],
                                                                      'constructor': ['inputObject',
                                                                                      '**kwargs'],
                                                                      'docstring': '\n\tA class that takes a now standard inputDict file and takes its parameterArray and events\n\t',
                                                                      'methods': [],
                                                                      'properties': ['pickledData',
                                                                                     'parameters',
                                                                                     'rawEventData']},
             'Tools.Operators.BehaviorOperator.RivalryLearningBehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.BehaviorOperator'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('openData',
                                                                                               [],
                                                                                               '\n\t\tOpens data file in pickle format, containing events and stimulus settings\n\t\t'),
                                                                                              ('separateEventsFromData',
                                                                                               [],
                                                                                               '')],
                                                                                  'properties': ['pickledData',
                                                                                                 'parameters',
                                                                                                 'rawEventData',
                                                                                                 'rawScreenData',
                                                                                                 'nonDuplicateEventData',
                                                                                                 'repetitionTimeEvents',
                                                                                                 'buttonEvents']},
             'Tools.Operators.BehaviorOperator.RivalryPercept': {'bases': ['object'],
                                                                 'constructor': ['startReport',
                                                                                 'endReport'],
                                                                 'docstring': 'docstring for RivalryPercept',
                                                                 'methods': [],
                                                                 'properties': ['startReport',
                                                                                'endReport',
                                                                                'duration',
                                                                                'startTime',
                                                                                'endTime',
                                                                                'identity']},
             'Tools.Operators.BehaviorOperator.RivalryReplayBehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.BehaviorOperator'],
                                                                                'constructor': ['inputObject',
                                                                                                '**kwargs'],
                                                                                'docstring': "\n\tThis behavior operator parses the outputs of Jan's behavioral output format in order to take out event timings.\n\t",
                                                                                'methods': [('openData',
                                                                                             [],
                                                                                             'docstring for openData'),
                                                                                            ('separateEventsFromData',
                                                                                             ['reactionTime=0.4',
                                                                                              'timeRange=[10, 130]'],
                                                                                             'docstring for separateEventsFromData')],
                                                                                'properties': ['rawData',
                                                                                               'parameters',
                                                                                               'yokedRawEvents',
                                                                                               'buttonRawEvents',
                                                                                               'allButtonEvents',
                                                                                               'buttonEvents',
                                                                                               'rivalryButtonEvents',
                                                                                               'rivalryButtonPeriods',
                                                                                               'rivalryPeriods',
                                                                                               'percepts',
                                                                                               'transitions',
                                                                                               'startInstantYokedEventOnsets',
                                                                                               'startInstantYokedEventOffsets',
                                                                                               'yokedEvents',
                                                                                               'yokedPeriods',
                                                                                               'transitionEventsAsArray',
                                                                                               'perceptEventsAsArray',
                                                                                               'perceptsNoTransitionsAsArray',
                                                                                               'halfwayTransitionsAsArray',
                                                                                               'meanPerceptDuration',
                                                                                               'meanTransitionDuration',
                                                                                               'meanPerceptsNoTransitionsDuration']},
             'Tools.Operators.BehaviorOperator.RivalryTrackingBehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.RivalryLearningBehaviorOperator'],
                                                                                  'constructor': ['inputObject',
                                                                                                  '**kwargs'],
                                                                                  'docstring': 'docstring for ClassName',
                                                                                  'methods': [('joinButtonDownAndUps',
                                                                                               [],
                                                                                               "\n\t\tconvert button ups to the right format because first sessions didn't do that\n\t\tthen, create events that may be percepts or transitions. these are stored in lists\n\t\t")],
                                                                                  'properties': ['perceptsNoTransitions',
                                                                                                 'perceptsNoTransitionsAsArray',
                                                                                                 'transitions',
                                                                                                 'percepts',
                                                                                                 'transitionEventsAsArray',
                                                                                                 'perceptEventsAsArray',
                                                                                                 'meanPerceptDuration',
                                                                                                 'meanTransitionDuration',
                                                                                                 'meanPerceptsNoTransitionsDuration',
                                                                                                 'yokedPeriods']},
             'Tools.Operators.BehaviorOperator.SphereBehaviorOperator': {'bases': ['Tools.Operators.BehaviorOperator.BehaviorOperator'],
                                                                         'constructor': ['inputObject',
                                                                                         '**kwargs'],
                                                                         'docstring': '\n\tThis behavior operator parses the outputs of by own AM behavioral output format in order to take out event timings.\n\t',
                                                                         'methods': [('openData',
                                                                                      [],
                                                                                      'docstring for openData'),
                                                                                     ('separateEventsFromData',
                                                                                      ['reactionTime=0.4',
                                                                                       'timeRange=[0, 1000]',
                                                                                       'startEndPeriods=[16, -16]',
                                                                                       'time_resolution=0.0001'],
                                                                                      '')],
                                                                         'properties': ['rawData',
                                                                                        'parameters',
                                                                                        'startTime',
                                                                                        'timedData',
                                                                                        'TREvents',
                                                                                        'buttonEvents',
                                                                                        'TR',
                                                                                        'transitionEvents',
                                                                                        'percepts']},
             'Tools.Operators.BehaviorOperator.WedgeRemappingOperator': {'bases': ['Tools.Operators.BehaviorOperator.BehaviorOperator'],
                                                                         'constructor': ['inputObject',
                                                                                         '**kwargs'],
                                                                         'docstring': '',
                                                                         'methods': [('importFile',
                                                                                      [],
                                                                                      ''),
                                                                                     ('segmentOutputData',
                                                                                      [],
                                                                                      ''),
                                                                                     ('collectResponsesAfterColorChanges',
                                                                                      ['permittedResponseLag=standardPermittedResponseLag'],
                                                                                      '')],
                                                                         'properties': ['inputParams',
                                                                                        'outputData',
                                                                                        'stimColorEvents',
                                                                                        'colorResponseEvents',
                                                                                        'scannerTREvents',
                                                                                        'noColorEvents',
                                                                                        'answerList']},
             'Tools.Operators.CommandLineOperator.AnnotationToLabelOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                               'constructor': ['inputObject',
                                                                                               "cmd='mri_annotation2label'",
                                                                                               '**kwargs'],
                                                                               'docstring': 'docstring for LabelToVolOperator',
                                                                               'methods': [('configure',
                                                                                            ['subjectID',
                                                                                             'hemispheres=None'],
                                                                                            '\n\t\tconfigure sets up the command line for surf to vol translation.\n\t\t')],
                                                                               'properties': ['runcmd']},
             'Tools.Operators.CommandLineOperator.BBRegisterOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                        'constructor': ['inputObject',
                                                                                        'FSsubject',
                                                                                        "contrast='t2'",
                                                                                        '**kwargs'],
                                                                        'docstring': '\n\tBBRegisterOperator invokes bbregister\n\t',
                                                                        'methods': [('configure',
                                                                                     ['transformMatrixFileName',
                                                                                      'flirtOutputFile=True',
                                                                                      'init_fsl=True'],
                                                                                     '\n\t\trun will run mcflirt motion correction on file in inputObject\n\t\tas specified by parameters in __init__ arguments and here to run\n\t\toutput file is usually session\'s "processed/mri/reg/register.dat"\n\t\t')],
                                                                        'properties': ['FSsubject',
                                                                                       'contrast',
                                                                                       'transformMatrixFileName',
                                                                                       'flirtOutputFileName',
                                                                                       'runcmd']},
             'Tools.Operators.CommandLineOperator.BETOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                 'constructor': ['inputObject',
                                                                                 '**kwargs'],
                                                                 'docstring': '\n\tBETOperator does something like /usr/local/fsl/bin/bet /Users/tk/Documents/research/experiments/retinotopy/RetMapAmsterdam/data/TK/TK_080910/processed/mri/inplane_anat/5/TK_080910_5 /Users/tk/Documents/research/experiments/retinotopy/RetMapAmsterdam/data/TK/TK_080910/processed/mri/inplane_anat/5/TK_080910_5_NB -z -f 0.5 -g 0 -m\n\t',
                                                                 'methods': [('configure',
                                                                              ['outputFileName=None'],
                                                                              '\n\t\tconfigure will run mcflirt motion correction on file in inputObject\n\t\tas specified by parameters in __init__ arguments and here to run.\n\t\t')],
                                                                 'properties': ['outputFileName',
                                                                                'runcmd']},
             'Tools.Operators.CommandLineOperator.CommandLineOperator': {'bases': ['Tools.Operators.CommandLineOperator.Operator'],
                                                                         'constructor': ['inputObject',
                                                                                         'cmd',
                                                                                         '**kwargs'],
                                                                         'docstring': '',
                                                                         'methods': [('configure',
                                                                                      [],
                                                                                      '\n\t\tplaceholder for configure\n\t\tto be filled in by subclasses\n\t\t'),
                                                                                     ('execute',
                                                                                      ['wait=True'],
                                                                                      '\n\t\tplaceholder for execute\n\t\tto be filled in by subclasses\n\t\t')],
                                                                         'properties': ['inputFileName',
                                                                                        'inputList',
                                                                                        'cmd',
                                                                                        'runcmd']},
             'Tools.Operators.CommandLineOperator.ConcatFlirtOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                         'constructor': ['inputObject',
                                                                                         "cmd='convert_xfm'",
                                                                                         '**kwargs'],
                                                                         'docstring': 'docstring for FlirtOperator',
                                                                         'methods': [('configure',
                                                                                      ['secondInputFile',
                                                                                       'outputFileName=None'],
                                                                                      '\n\t\tstandard configure is configureRun instead of apply\n\t\t')],
                                                                         'properties': ['outputFileName',
                                                                                        'transformMatrixFileName',
                                                                                        'secondInputFile',
                                                                                        'runcmd']},
             'Tools.Operators.CommandLineOperator.EDF2ASCOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                     'constructor': ['inputObject',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n\tEDF2ASCOperator will convert an edf file to a pair of output files, one containing the gaze samples (.gaz) and another containing all the messages/events (.msg).\n\tIt uses edf2asc command-line executable, which is assumed to be on the $PATH.\n\tMissing values are imputed as 0.0001, time is represented as a floating point number for 2000Hz sampling.\n\t',
                                                                     'methods': [('configure',
                                                                                  ['gazeOutputFileName=None',
                                                                                   'messageOutputFileName=None',
                                                                                   "settings=' -t -ftime '"],
                                                                                  '')],
                                                                     'properties': ['gazeOutputFileName',
                                                                                    'messageOutputFileName',
                                                                                    'intermediatecmd',
                                                                                    'gazcmd',
                                                                                    'msgcmd',
                                                                                    'runcmd']},
             'Tools.Operators.CommandLineOperator.FEATOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                  'constructor': ['inputObject',
                                                                                  '**kwargs'],
                                                                  'docstring': 'FEATOperator assumes bash is the shell used, and that fsl binaries are located in /usr/local/fsl/bin/',
                                                                  'methods': [('configure',
                                                                               ['REDict={}',
                                                                                "featFileName=''",
                                                                                'waitForExecute=False'],
                                                                               '\n\t\tconfigure will run feat on file in inputObject\n\t\tas specified by parameters in __init__ arguments and here to run.\n\t\t')],
                                                                  'properties': ['featFile',
                                                                                 'cmd',
                                                                                 'featFileName',
                                                                                 'runcmd']},
             'Tools.Operators.CommandLineOperator.FSLMathsOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                      'constructor': ['inputObject',
                                                                                      "cmd='fslmaths'",
                                                                                      "outputDataType='float'",
                                                                                      '**kwargs'],
                                                                      'docstring': 'docstring for FSLMathsOperator',
                                                                      'methods': [('configure',
                                                                                   ['outputFileName=None',
                                                                                    '**kwargs'],
                                                                                   '\n\t\tconfigure takes a dict of arguments\n\t\tthey are all represented as key-values in the command line\n\t\texcept when value is empty, then only key is printed on the command line\n\t\t'),
                                                                                  ('configureTMean',
                                                                                   ['outputFileName=None'],
                                                                                   ''),
                                                                                  ('configureTStd',
                                                                                   ['outputFileName=None'],
                                                                                   ''),
                                                                                  ('configureBPF',
                                                                                   ['outputFileName=None',
                                                                                    'nr_samples_hp=30',
                                                                                    'nr_samples_lp=-1.0'],
                                                                                   '')],
                                                                      'properties': ['outputDataType',
                                                                                     'outputFileName',
                                                                                     'runcmd']},
             'Tools.Operators.CommandLineOperator.FlirtOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                   'constructor': ['inputObject',
                                                                                   "referenceFileName='$FSLDIR/data/standard/MNI152_T1_2mm_brain.nii.gz'",
                                                                                   "cmd='flirt'",
                                                                                   "costFunction='normmi'",
                                                                                   '**kwargs'],
                                                                   'docstring': 'docstring for FlirtOperator',
                                                                   'methods': [('configureApply',
                                                                                ['transformMatrixFileName',
                                                                                 'outputFileName=None',
                                                                                 'sinc=True'],
                                                                                "\n\t\tapply runs flirt's applyxfm argument.\n\t\tIt takes an input matrix and a reference file in order to use transformMatrix\n\t\tto perform the transformation - it doesn't calculate the transformation itself.\n\t\t"),
                                                                               ('configureRun',
                                                                                ['outputFileName=None',
                                                                                 'transformMatrixFileName=None',
                                                                                 'sinc=True',
                                                                                 'resample=True',
                                                                                 "extra_args=''"],
                                                                                '\n\t\trun runs actual transformation calculation\n\t\t')],
                                                                   'properties': ['referenceFileName',
                                                                                  'costFunction',
                                                                                  'transformMatrixFileName',
                                                                                  'outputFileName',
                                                                                  'runcmd']},
             'Tools.Operators.CommandLineOperator.InvertFlirtOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                         'constructor': ['inputObject',
                                                                                         "cmd='convert_xfm'",
                                                                                         '**kwargs'],
                                                                         'docstring': 'docstring for FlirtOperator',
                                                                         'methods': [('configure',
                                                                                      ['outputFileName=None'],
                                                                                      '\n\t\tstandard configure is configureRun instead of apply\n\t\t')],
                                                                         'properties': ['outputFileName',
                                                                                        'transformMatrixFileName',
                                                                                        'runcmd']},
             'Tools.Operators.CommandLineOperator.LabelToVolOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                        'constructor': ['inputObject',
                                                                                        "cmd='mri_label2vol'",
                                                                                        '**kwargs'],
                                                                        'docstring': 'docstring for LabelToVolOperator',
                                                                        'methods': [('configure',
                                                                                     ['templateFileName',
                                                                                      'hemispheres=None',
                                                                                      'register=None',
                                                                                      "fsSubject=''",
                                                                                      'outputFileName=None',
                                                                                      'threshold=0.5',
                                                                                      "surfType='label'"],
                                                                                     '\n\t\tconfigure sets up the command line for surf to vol translation.\n\t\t')],
                                                                        'properties': ['outputFileName',
                                                                                       'templateFileName',
                                                                                       'register',
                                                                                       'surfType',
                                                                                       'runcmd']},
             'Tools.Operators.CommandLineOperator.MCFlirtOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                     'constructor': ['inputObject',
                                                                                     "costFunction='normmi'",
                                                                                     'target=None',
                                                                                     '**kwargs'],
                                                                     'docstring': 'docstring for MCFlirtOperator',
                                                                     'methods': [('configure',
                                                                                  ['plot=True',
                                                                                   'sinc=True',
                                                                                   'report=True',
                                                                                   'outputFileName=None'],
                                                                                  '\n\t\tconfigure will run mcflirt motion correction on file in inputObject\n\t\tas specified by parameters in __init__ arguments and here to run.\n\t\t')],
                                                                     'properties': ['costFunction',
                                                                                    'target',
                                                                                    'outputFileName',
                                                                                    'runcmd']},
             'Tools.Operators.CommandLineOperator.MRIConvertOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                        'constructor': ['inputObject',
                                                                                        "cmd='mri_convert'",
                                                                                        '**kwargs'],
                                                                        'docstring': '',
                                                                        'methods': [('configure',
                                                                                     ["output_type='.nii.gz'"],
                                                                                     '')],
                                                                        'properties': ['outputFileName',
                                                                                       'runcmd']},
             'Tools.Operators.CommandLineOperator.MRISConvertOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                         'constructor': ['inputObject',
                                                                                         "cmd='mris_convert'",
                                                                                         '**kwargs'],
                                                                         'docstring': 'docstring for SurfToVolOperator',
                                                                         'methods': [('configure',
                                                                                      ['outputFileName=None',
                                                                                       "surfaceFile='inflated'"],
                                                                                      '')],
                                                                         'properties': ['outputFileName',
                                                                                        'runcmd']},
             'Tools.Operators.CommandLineOperator.ParRecConversionOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                              'constructor': ['inputObject',
                                                                                              "cmd='dcm2nii'",
                                                                                              '**kwargs'],
                                                                              'docstring': 'docstring for ParRecConversionOperator',
                                                                              'methods': [('configure',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['runcmd']},
             'Tools.Operators.CommandLineOperator.RetMapOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                    'constructor': ['inputObject',
                                                                                    "cmd=os.path.join(Subscript(Getattr(Name('os'), 'environ'), 'OP_APPLY', [Const('ANALYSIS_HOME')]), 'Tools', 'other_scripts', 'selfreqavg_noinfs.csh')",
                                                                                    '**kwargs'],
                                                                    'docstring': '\n\tRetMapOperator takes a list of runList items which specify the runs to be analyzed.\n\tthe runlist items, from the session which calls the retmapoperator, dictate\n\tmapping parameters for the retinotopic mapping analyses.\n\t',
                                                                    'methods': [('configure',
                                                                                 ['inputFileNames',
                                                                                  'outputFileName'],
                                                                                 'configure runs and the command line command to run the analysis')],
                                                                    'properties': ['inputFileNames',
                                                                                   'outputFileName',
                                                                                   'allRuns',
                                                                                   'runcmd']},
             'Tools.Operators.CommandLineOperator.RetMapReDrawOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                          'constructor': ['inputObject',
                                                                                          '**kwargs'],
                                                                          'docstring': 'docstring for MCFlirtOperator',
                                                                          'methods': [('configure',
                                                                                       ['REDict={}',
                                                                                        "redrawFileName=''",
                                                                                        'waitForExecute=False'],
                                                                                       '\n\t\tconfigure will run feat on file in inputObject\n\t\tas specified by parameters in __init__ arguments and here to run.\n\t\t')],
                                                                          'properties': ['redrawFile',
                                                                                         'redrawFileName',
                                                                                         'runcmd']},
             'Tools.Operators.CommandLineOperator.SurfToSurfOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                        'constructor': ['inputObject',
                                                                                        "cmd='mri_surf2surf'",
                                                                                        '**kwargs'],
                                                                        'docstring': 'docstring for SurfToVolOperator',
                                                                        'methods': [('configure',
                                                                                     ["fsSourceSubject=''",
                                                                                      "fsTargetSubject=''",
                                                                                      'hemi=None',
                                                                                      'outputFileName=None',
                                                                                      'insmooth=0',
                                                                                      "intype='paint'",
                                                                                      "outtype='paint'"],
                                                                                     'docstring for configure')],
                                                                        'properties': ['runcmd']},
             'Tools.Operators.CommandLineOperator.SurfToVolOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                       'constructor': ['inputObject',
                                                                                       "cmd='mri_surf2vol'",
                                                                                       '**kwargs'],
                                                                       'docstring': 'docstring for SurfToVolOperator',
                                                                       'methods': [('configure',
                                                                                    ['templateFileName',
                                                                                     'hemispheres=None',
                                                                                     'register=None',
                                                                                     "fsSubject=''",
                                                                                     'outputFileName=None',
                                                                                     'threshold=0.5',
                                                                                     "surfType='paint'"],
                                                                                    'docstring for configure')],
                                                                       'properties': ['outputFileName',
                                                                                      'templateFileName',
                                                                                      'register',
                                                                                      'surfType',
                                                                                      'runcmd']},
             'Tools.Operators.CommandLineOperator.VolToSurfOperator': {'bases': ['Tools.Operators.CommandLineOperator.CommandLineOperator'],
                                                                       'constructor': ['inputObject',
                                                                                       "cmd='mri_vol2surf'",
                                                                                       '**kwargs'],
                                                                       'docstring': 'docstring for VolToSurfOperator',
                                                                       'methods': [('configure',
                                                                                    ["frames={'sig-0': 0, 'map-real': 1, 'map-imag': 2, 'phase': 9, 'noise_sd': 6, 'sigf': 0, 'sig2': 1, 'sig3': 2, 'F': 3}",
                                                                                     'hemispheres=None',
                                                                                     'register=None',
                                                                                     'outputFileName=None',
                                                                                     'threshold=0.5',
                                                                                     'surfSmoothingFWHM=0.0',
                                                                                     "surfType='paint'"],
                                                                                    'docstring for configure')],
                                                                       'properties': ['outputFileName',
                                                                                      'register',
                                                                                      'surfType',
                                                                                      'runcmd']},
             'Tools.Operators.CommandLineOperator.retMapRun': {'bases': ['object'],
                                                               'constructor': ['ID',
                                                                               'stimType',
                                                                               'direction',
                                                                               'TR',
                                                                               'niiFilePath',
                                                                               'delay=4.0',
                                                                               'nSkip=12',
                                                                               'nrCycles=6'],
                                                               'docstring': '',
                                                               'methods': [('createParFile',
                                                                            [],
                                                                            '')],
                                                               'properties': ['ID',
                                                                              'TR',
                                                                              'nrCycles',
                                                                              'stimType',
                                                                              'direction',
                                                                              'nSkip',
                                                                              'delay',
                                                                              'niiFilePath',
                                                                              'standardParFileName',
                                                                              'parFileName']},
             'Tools.Operators.EyeOperator.ASLEyeOperator': {'bases': ['Tools.Operators.EyeOperator.EyeOperator'],
                                                            'constructor': ['inputObject',
                                                                            '**kwargs'],
                                                            'docstring': 'docstring for ASLEyeOperator',
                                                            'methods': [('trSignals',
                                                                         ['TR=None'],
                                                                         ''),
                                                                        ('firstPass',
                                                                         ['nrVolumes',
                                                                          'delay',
                                                                          'TR=None',
                                                                          'makeFigure=False',
                                                                          "figureFileName=''"],
                                                                         '')],
                                                            'properties': ['type',
                                                                           'rawDataFile',
                                                                           'sampleFrequency',
                                                                           'TRinfo',
                                                                           'TRtimeIndices',
                                                                           'TRtimes',
                                                                           'firstTR',
                                                                           'TR',
                                                                           'nrVolumes',
                                                                           'delay',
                                                                           'error',
                                                                           'gazeDataHor',
                                                                           'gazeDataHorPerTR',
                                                                           'gazeDataVer',
                                                                           'gazeDataVerPerTR',
                                                                           'pupilRecogn',
                                                                           'pupilRecognPerTR',
                                                                           'horVelocities',
                                                                           'horVelocitiesPerTR',
                                                                           'verVelocities',
                                                                           'verVelocitiesPerTR',
                                                                           'horVelocitiesNoA',
                                                                           'verVelocitiesNoA',
                                                                           'hVRunningSD',
                                                                           'hVRunningSDPerTR',
                                                                           'gazeDataDuringExpt']},
             'Tools.Operators.EyeOperator.EyeOperator': {'bases': ['Tools.Operators.EyeOperator.Operator'],
                                                         'constructor': ['inputObject',
                                                                         '**kwargs'],
                                                         'docstring': 'docstring for ImageOperator',
                                                         'methods': [],
                                                         'properties': ['inputFileName']},
             'Tools.Operators.EyeOperator.EyelinkOperator': {'bases': ['Tools.Operators.EyeOperator.EyeOperator'],
                                                             'constructor': ['inputObject',
                                                                             'split=True',
                                                                             "date_format='python_experiment'",
                                                                             '**kwargs'],
                                                             'docstring': 'docstring for EyelinkOperator',
                                                             'methods': [('convertGazeData',
                                                                          [],
                                                                          ''),
                                                                         ('loadData',
                                                                          ['get_gaze_data=True'],
                                                                          ''),
                                                                         ('findAll',
                                                                          ['check_answers=False',
                                                                           'el_key_event_RE=None'],
                                                                          'docstring for findAll'),
                                                                         ('findOccurences',
                                                                          ["RE=''"],
                                                                          ''),
                                                                         ('findRecordingParameters',
                                                                          ["sampleRE='MSG\\t[\\\\d\\\\.]+\\t!MODE RECORD CR (\\\\d+) \\\\d+ \\\\d+ (\\\\S+)'",
                                                                           "screenRE='MSG\\t[\\\\d\\\\.]+\\tGAZE_COORDS (\\\\d+.\\\\d+) (\\\\d+.\\\\d+) (\\\\d+.\\\\d+) (\\\\d+.\\\\d+)'",
                                                                           "pixelRE='MSG\\t[\\\\d\\\\.]+\\tdegrees per pixel (\\\\d*.\\\\d*)'",
                                                                           'standardPixelsPerDegree=84.6'],
                                                                          ''),
                                                                         ('findELEvents',
                                                                          ["saccRE='ESACC\\t(\\\\S+)[\\\\s\\t]+(-?\\\\d*\\\\.?\\\\d*)\\t(-?\\\\d+\\\\.?\\\\d*)\\\\s+(-?\\\\d+\\\\.?\\\\d*)\\\\s+(-?\\\\d+\\\\.?\\\\d*)\\\\s+(-?\\\\d+\\\\.?\\\\d*)\\\\s+(-?\\\\d+\\\\.?\\\\d*)\\\\s+(-?\\\\d+.?\\\\d+)'",
                                                                           "fixRE='EFIX\\t(\\\\S+)\\\\s+(-?\\\\d*\\\\.?\\\\d*)\\t(-?\\\\d+\\\\.?\\\\d*)\\\\s+(-?\\\\d+\\\\.?\\\\d*)?\\\\s+(-?\\\\d+\\\\.?\\\\d*)?\\\\s+(-?\\\\d+\\\\.?\\\\d*)?\\\\s+(-?\\\\d+\\\\.?\\\\d*)?'",
                                                                           "blinkRE='EBLINK\\t(\\\\S+)\\\\s+(-?\\\\d*\\\\.?\\\\d*)\\t(-?\\\\d+\\\\.?\\\\d*)\\\\s+(-?\\\\d?.?\\\\d*)?'"],
                                                                          '\n\t\tsearches for the ends of Eyelink events, since they\n\t\tcontain all the information about the occurrence of the event. Examples:\n\t\tESACC\tR\t2347313\t2347487\t174\t  621.8\t  472.4\t  662.0\t  479.0\t   0.99\t \n\t\tEFIX\tR\t2340362.0\t2347312.0\t6950\t  650.0\t  480.4\t   5377\n\t\tEBLINK\tR\t2347352\t2347423\t71\n\t\t'),
                                                                         ('findTrials',
                                                                          ["startRE='MSG\\t([\\\\d\\\\.]+)\\ttrial (\\\\d+) started at (\\\\d+.\\\\d)'",
                                                                           "stopRE='MSG\\t([\\\\d\\\\.]+)\\ttrial (\\\\d+) stopped at (\\\\d+.\\\\d)'"],
                                                                          ''),
                                                                         ('findTrialPhases',
                                                                          ["RE='MSG\\t([\\\\d\\\\.]+)\\ttrial X phase (\\\\d+) started at (\\\\d+.\\\\d)'"],
                                                                          ''),
                                                                         ('findKeyEvents',
                                                                          ['RE="MSG\\t([\\\\d\\\\.]+)\\ttrial X event \\\\<Event\\\\((\\\\d)-Key(\\\\S*?) {\'scancode\': (\\\\d+), \'key\': (\\\\d+)(, \'unicode\': u\'\\\\S*?\',|,) \'mod\': (\\\\d+)}\\\\)\\\\> at (\\\\d+.\\\\d)"'],
                                                                          ''),
                                                                         ('findParameters',
                                                                          ["RE='MSG\\t[\\\\d\\\\.]+\\ttrial X parameter[\\t ]*(\\\\S*?)\\\\s\\\\s+: ([-\\\\d\\\\.]*|[\\\\w]*)'",
                                                                           'add_parameters=None'],
                                                                          ''),
                                                                         ('removeDrift',
                                                                          ['cutoffFrequency=0.1',
                                                                           'cleanup=True'],
                                                                          '\n\t\tRemoves low frequency drift of frequency lower than cutoffFrequency from the eye position signals\n\t\tcleanup removes intermediate data formats\n\t\t'),
                                                                         ('computeVelocities',
                                                                          ['smoothingFilterWidth=0.002'],
                                                                          '\n\t\tcalculates velocities by multiplying the fourier-transformed raw data and a derivative of gaussian.\n\t\tthe width of this gaussian determines the extent of temporal smoothing inherent in the calculation.\n\t\tPresently works only for one-eye data only - will change this as binocular data comes available.\n\t\t'),
                                                                         ('processIntoTable',
                                                                          ["hdf5_filename=''",
                                                                           "name='bla'",
                                                                           'compute_velocities=False',
                                                                           'check_answers=False',
                                                                           'el_key_event_RE=None'],
                                                                          "\n\t\tTake all the existent data from this run's edf file and put it into a standard format hdf5 file using pytables.\n\t\t"),
                                                                         ('clean_data', [], ''),
                                                                         ('import_parameters',
                                                                          ["run_name='run_'"],
                                                                          ''),
                                                                         ('get_EL_samples_per_trial',
                                                                          ['run_name=0',
                                                                           'trial_ranges=[[0, -1]]',
                                                                           'trial_phase_range=[0, -1]',
                                                                           "data_type='smoothed_velocity'"],
                                                                          ''),
                                                                         ('get_EL_events_per_trial',
                                                                          ["run_name=''",
                                                                           'trial_ranges=[[0, -1]]',
                                                                           'trial_phase_range=[0, -1]',
                                                                           "data_type='saccades'"],
                                                                          ''),
                                                                         ('detect_saccade_from_data',
                                                                          ['xy_data=None',
                                                                           'xy_velocity_data=None',
                                                                           'l=5',
                                                                           'sample_times=None',
                                                                           'pixels_per_degree=26.365',
                                                                           'plot=False'],
                                                                          '\n\t\tdetect_saccade_from_data takes a sequence (2 x N) of xy gaze position or velocity data and uses the engbert & mergenthaler algorithm (PNAS 2006) to detect saccades.\n\t\tL determines the threshold - standard set at 5 median-based standard deviations from the median\n\t\t')],
                                                             'properties': ['type',
                                                                            'inputFileName',
                                                                            'messageFile',
                                                                            'gazeFile',
                                                                            'timeStamp',
                                                                            'timeStamp_numpy',
                                                                            'hdf5_filename',
                                                                            'workingString',
                                                                            'workingStringClean',
                                                                            'msgData',
                                                                            'gazeData',
                                                                            'trials',
                                                                            'parameterStrings',
                                                                            'sampleFrequency',
                                                                            'eye',
                                                                            'screenStrings',
                                                                            'screenCorners',
                                                                            'screenSizePixels',
                                                                            'pixelStrings',
                                                                            'pixelsPerDegree',
                                                                            'saccades_from_MSG_file',
                                                                            'fixations_from_MSG_file',
                                                                            'blinks_from_MSG_file',
                                                                            'saccadesTypeDictionary',
                                                                            'fixationsTypeDictionary',
                                                                            'blinksTypeDictionary',
                                                                            'startTrialStrings',
                                                                            'stopTrialStrings',
                                                                            'monotonic',
                                                                            'nrRunsInDataFile',
                                                                            'trialStarts',
                                                                            'trialEnds',
                                                                            'nrTrials',
                                                                            'which_trials_actually_exist',
                                                                            'trialTypeDictionary',
                                                                            'phaseStarts',
                                                                            'nrPhaseStarts',
                                                                            'events',
                                                                            'eventTypeDictionary',
                                                                            'parameters',
                                                                            'parameterTypeDictionary',
                                                                            'signalNrSamples',
                                                                            'cutoffFrequency',
                                                                            'representedFrequencies',
                                                                            'f',
                                                                            'thres',
                                                                            'fourierData',
                                                                            'fourierFilteredData',
                                                                            'filteredGazeData',
                                                                            'fourierVelocityData',
                                                                            'normedVelocityData',
                                                                            'velocityData',
                                                                            'fourierSmoothedVelocityData',
                                                                            'normedSmoothedVelocityData',
                                                                            'smoothedVelocityData',
                                                                            'smoothedGazeData',
                                                                            'runName',
                                                                            'timings',
                                                                            'parameter_data']},
             'Tools.Operators.EyeOperator.SMIEyeOperator': {'bases': ['Tools.Operators.EyeOperator.EyeOperator'],
                                                            'constructor': [],
                                                            'docstring': '\n\tClass for the analysis of SMI output.\n\tInput is assumed to be already-converted text files, containing a mixture of samples and messages.\n\t',
                                                            'methods': [],
                                                            'properties': []},
             'Tools.Operators.ImageOperator.Design': {'bases': ['object'],
                                                      'constructor': ['nrTimePoints',
                                                                      'rtime',
                                                                      'subSamplingRatio=100'],
                                                      'docstring': 'Design represents the design matrix of a given run',
                                                      'methods': [('addRegressor',
                                                                   ['regressor'],
                                                                   '\n\t\tregressors are vectors identical to custom EV files in FSL\n\t\t'),
                                                                  ('convolveWithHRF',
                                                                   ["hrfType='singleGamma'",
                                                                    "hrfParameters={'a': 6, 'b': 0.9}"],
                                                                   'convolveWithHRF convolves the designMatrix with the specified HRF and build final regressors by resampling to TR times'),
                                                                  ('configure',
                                                                   ['regressors',
                                                                    "hrfType='singleGamma'",
                                                                    "hrfParameters={'a': 6, 'b': 0.9}"],
                                                                   '\n\t\tconfigure takes the design matrix in FSL EV format and sets up the design matrix\n\t\t')],
                                                      'properties': ['nrTimePoints',
                                                                     'rtime',
                                                                     'subSamplingRatio',
                                                                     'rawDesignMatrix',
                                                                     'timeValuesForConvolution',
                                                                     'hrfType',
                                                                     'hrfKernel',
                                                                     'designMatrix']},
             'Tools.Operators.ImageOperator.Filter1D': {'bases': ['object'],
                                                        'constructor': ['sampleInterval',
                                                                        'signalNrSamples',
                                                                        'cutoff'],
                                                        'docstring': '\n\tFilter\n\tconstructs filters in order to pass in fourier space\n\tband-pass filters should be unimportant for now - will add them later\n\t',
                                                        'methods': [],
                                                        'properties': ['sampleInterval',
                                                                       'signalNrSamples',
                                                                       'cutoff',
                                                                       'representedFrequencies',
                                                                       'f',
                                                                       'thres']},
             'Tools.Operators.ImageOperator.HighPassFilter1D': {'bases': ['Tools.Operators.ImageOperator.Filter1D'],
                                                                'constructor': ['sampleInterval',
                                                                                'signalNrSamples',
                                                                                'cutoff'],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': []},
             'Tools.Operators.ImageOperator.ImageMaskingOperator': {'bases': ['Tools.Operators.ImageOperator.ImageOperator'],
                                                                    'constructor': ['inputObject',
                                                                                    'maskObject=None',
                                                                                    'thresholds=[0.0]',
                                                                                    'nrVoxels=[False]',
                                                                                    'outputFileName=False',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [('buildData',
                                                                                 [],
                                                                                 '\n\t\tbuildData creates the necessary arrays of data in \n\t\tsuch a way that even single-volume masks will have 4D shapes.\n\t\tThis makes all masking functions transparent\n\t\t'),
                                                                                ('applySingleMask',
                                                                                 ['whichMask=0',
                                                                                  'maskThreshold=0.0',
                                                                                  'nrVoxels=False',
                                                                                  "maskFunction='__gt__'",
                                                                                  'flat=False'],
                                                                                 'docstring for applySingleMask'),
                                                                                ('applyAllMasks',
                                                                                 ['save=True',
                                                                                  "maskFunction='__gt__'",
                                                                                  'flat=False'],
                                                                                 'docstring for applyAllMasks'),
                                                                                ('execute',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['maskObject',
                                                                                   'maskFileName',
                                                                                   'thresholds',
                                                                                   'nrVoxels',
                                                                                   'outputFileName',
                                                                                   'maskFrameNames',
                                                                                   'maskHeader',
                                                                                   'inputHeader',
                                                                                   'maskData',
                                                                                   'inputData']},
             'Tools.Operators.ImageOperator.ImageOperator': {'bases': ['Tools.Operators.ImageOperator.Operator'],
                                                             'constructor': ['inputObject',
                                                                             '**kwargs'],
                                                             'docstring': 'docstring for ImageOperator',
                                                             'methods': [],
                                                             'properties': ['inputObject',
                                                                            'inputFileName',
                                                                            'inputArray']},
             'Tools.Operators.ImageOperator.ImageRegressOperator': {'bases': ['Tools.Operators.ImageOperator.ImageOperator'],
                                                                    'constructor': ['inputObject',
                                                                                    'regressors',
                                                                                    '**kwargs'],
                                                                    'docstring': '\n\tclass for running glms on functional data\n\ttakes a functional data file and creates a design matrix for it\n\tcalculates glm and returns results\n\t',
                                                                    'methods': [('execute',
                                                                                 ["outputFormat=['betas', 'sse', 'rank', 'sing']"],
                                                                                 'docstring for execute')],
                                                                    'properties': ['design']},
             'Tools.Operators.ImageOperator.ImageTimeFilterOperator': {'bases': ['Tools.Operators.ImageOperator.ImageOperator'],
                                                                       'constructor': ['inputObject',
                                                                                       "filterType='highpass'",
                                                                                       '**kwargs'],
                                                                       'docstring': '\n\tclass for filtering functional data\n\ttakes a functional data file and creates a filter for it\n\texecute returns the filtered functional data \n\tUses fft for filtering\n\t',
                                                                       'methods': [('configure',
                                                                                    ['frequency',
                                                                                     'outputFileName=None'],
                                                                                    'docstring for configure'),
                                                                                   ('execute',
                                                                                    [],
                                                                                    'docstring for execute')],
                                                                       'properties': ['filterType',
                                                                                      'frequency',
                                                                                      'f',
                                                                                      'outputFileName',
                                                                                      'fourierData',
                                                                                      'fourierFilteredData',
                                                                                      'backFourierFilteredData',
                                                                                      'filteredData']},
             'Tools.Operators.ImageOperator.LowPassFilter1D': {'bases': ['Tools.Operators.ImageOperator.Filter1D'],
                                                               'constructor': ['sampleInterval',
                                                                               'signalNrSamples',
                                                                               'cutoff'],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'Tools.Operators.ImageOperator.PercentSignalChangeOperator': {'bases': ['Tools.Operators.ImageOperator.ImageOperator'],
                                                                           'constructor': ['inputObject',
                                                                                           'outputFileName=None',
                                                                                           '**kwargs'],
                                                                           'docstring': '\n\tPercentSignalChangeOperator\n\tdoes exactly what its name implies\n\t',
                                                                           'methods': [('execute',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['outputFileName']},
             'Tools.Operators.ImageOperator.ZScoreOperator': {'bases': ['Tools.Operators.ImageOperator.ImageOperator'],
                                                              'constructor': ['inputObject',
                                                                              'outputFileName=None',
                                                                              '**kwargs'],
                                                              'docstring': '\n\tPercentSignalChangeOperator\n\tdoes exactly what its name implies\n\t',
                                                              'methods': [('execute', [], '')],
                                                              'properties': ['outputFileName']},
             'Tools.Operators.Operator.Operator': {'bases': ['object'],
                                                   'constructor': ['inputObject', '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('configure',
                                                                [],
                                                                '\n\t\tplaceholder for configure\n\t\tto be filled in by subclasses\n\t\t'),
                                                               ('execute',
                                                                [],
                                                                '\n\t\tplaceholder for execute\n\t\tto be filled in by subclasses\n\t\t')],
                                                   'properties': ['inputObject', 'logger']},
             'Tools.Project.Project': {'bases': ['object'],
                                       'constructor': ['projectName', '**kwargs'],
                                       'docstring': 'docstring for project',
                                       'methods': [],
                                       'properties': ['projectName']},
             'Tools.Run.RivalryLearningRun': {'bases': ['Tools.Run.Run'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('behavior',
                                                           [],
                                                           'docstring for behavior')],
                                              'properties': ['bO']},
             'Tools.Run.RivalryReplayRun': {'bases': ['Tools.Run.Run'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('behavior', [], '')],
                                            'properties': ['bO']},
             'Tools.Run.Run': {'bases': ['object'],
                               'constructor': ['**kwargs'],
                               'docstring': '',
                               'methods': [('addTrial', ['trial'], 'docstring for addTrial')],
                               'properties': ['indexInSession',
                                              'behaviorFile',
                                              'eyeLinkFile',
                                              'trialList',
                                              'condition',
                                              'dateTime']},
             'Tools.Sessions.EyeLinkSession.EyeLinkSession': {'bases': ['object'],
                                                              'constructor': ['ID',
                                                                              'subject',
                                                                              'project_name',
                                                                              'experiment_name',
                                                                              'base_directory',
                                                                              'wildcard',
                                                                              'loggingLevel=logging.DEBUG'],
                                                              'docstring': '',
                                                              'methods': [('create_folder_hierarchy',
                                                                           [],
                                                                           'docstring for createFolderHierarchy'),
                                                                          ('import_raw_data',
                                                                           ['original_data_directory'],
                                                                           'docstring for import_raw_data'),
                                                                          ('convert_edf',
                                                                           ['check_answers=True',
                                                                            'compute_velocities=True',
                                                                            "raw_file_directory='raw'"],
                                                                           'docstring for convert_edf'),
                                                                          ('import_parameters',
                                                                           ["run_name='run_'"],
                                                                           ''),
                                                                          ('import_events',
                                                                           ["run_name='run_'"],
                                                                           ''),
                                                                          ('get_EL_samples_per_trial',
                                                                           ['run_index=0',
                                                                            'trial_ranges=[[0, -1]]',
                                                                            'trial_phase_range=[0, -1]',
                                                                            "data_type='velocity_xy'",
                                                                            'scaling_factor=1.0'],
                                                                           ''),
                                                                          ('get_EL_events_per_trial',
                                                                           ['run_index=0',
                                                                            'trial_ranges=[[0, -1]]',
                                                                            'trial_phase_range=[0, -1]',
                                                                            "data_type='saccades'"],
                                                                           ''),
                                                                          ('detect_saccade_from_data',
                                                                           ['xy_data=None',
                                                                            'xy_velocity_data=None',
                                                                            'l=7.5',
                                                                            'sample_times=None',
                                                                            'pixels_per_degree=33.0',
                                                                            'plot=False'],
                                                                           '\n\t\tdetect_saccade_from_data takes a sequence (2 x N) of xy gaze position or velocity data and uses the engbert & mergenthaler algorithm (PNAS 2006) to detect saccades.\n\t\tL determines the threshold - standard set at 5 median-based standard deviations from the median\n\t\t')],
                                                              'properties': ['ID',
                                                                             'subject',
                                                                             'project_name',
                                                                             'experiment_name',
                                                                             'wildcard',
                                                                             'project_directory',
                                                                             'hdf5_filename',
                                                                             'saccade_dtype',
                                                                             'loggingLevel',
                                                                             'logger',
                                                                             'base_directory',
                                                                             'parameter_data',
                                                                             'event_data']},
             'Tools.Sessions.EyeLinkSession.MIBSession': {'bases': ['Tools.Sessions.EyeLinkSession.EyeLinkSession'],
                                                          'constructor': ['ID',
                                                                          'subject',
                                                                          'project_name',
                                                                          'experiment_name',
                                                                          'base_directory',
                                                                          'wildcard',
                                                                          'loggingLevel=logging.DEBUG'],
                                                          'docstring': 'docstring for MIBSession',
                                                          'methods': [('get_run_types',
                                                                       [],
                                                                       'Determines the run in which the edf files were created, and which run was which type of run [3 or 4].'),
                                                                      ('clean_trials_per_run',
                                                                       ['trial_events',
                                                                        'run_type',
                                                                        'trial_times'],
                                                                       ''),
                                                                      ('preprocess_trial_types',
                                                                       [],
                                                                       '')],
                                                          'properties': ['run_types',
                                                                         'events_per_run',
                                                                         'times_per_run',
                                                                         'durations_per_run',
                                                                         'parameters_per_run',
                                                                         'selected_parameters_per_run',
                                                                         'condition_names']},
             'Tools.Sessions.EyeLinkSession.MREyeLinkSession': {'bases': ['Tools.Sessions.EyeLinkSession.EyeLinkSession'],
                                                                'constructor': ['ID',
                                                                                'subject',
                                                                                'project_name',
                                                                                'experiment_name',
                                                                                'base_directory',
                                                                                'wildcard',
                                                                                'loggingLevel=logging.DEBUG'],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['ID',
                                                                               'subject',
                                                                               'project_name',
                                                                               'experiment_name',
                                                                               'wildcard',
                                                                               'base_directory',
                                                                               'hdf5_filename',
                                                                               'saccade_dtype',
                                                                               'loggingLevel',
                                                                               'logger']},
             'Tools.Sessions.EyeLinkSession.NewSASession': {'bases': ['Tools.Sessions.EyeLinkSession.SASession'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('analyze_saccades_for_run',
                                                                         ['run_index=0',
                                                                          'trial_phase_range=[1, 4]',
                                                                          'trial_ranges=[[25, 125], [125, 185], [185, 245]]',
                                                                          "colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']",
                                                                          'plot_saccades=False',
                                                                          "which_saccade_detection_procedure='el'",
                                                                          'gain_threshold=0.6'],
                                                                         ''),
                                                                        ('analyze_saccades_for_trial',
                                                                         ['parameters',
                                                                          'saccades',
                                                                          'parameter_saccades',
                                                                          'xy_data',
                                                                          'vel_data'],
                                                                         '\n\t\tTakes all the data for a given trial, i.e. parameters, eyelink gaze and velocity data, el_saccades and so forth.\n\t\tDistills the necessary parameters for this trial, such as saccade amplitude and the like.\n\t\t')],
                                                            'properties': []},
             'Tools.Sessions.EyeLinkSession.PupilSDTEyeLinkSession': {'bases': ['Tools.Sessions.EyeLinkSession.EyeLinkSession'],
                                                                      'constructor': ['ID',
                                                                                      'subject',
                                                                                      'project_name',
                                                                                      'experiment_name',
                                                                                      'base_directory',
                                                                                      'wildcard',
                                                                                      'loggingLevel=logging.DEBUG'],
                                                                      'docstring': '',
                                                                      'methods': [('get_EL_samples_per_trial',
                                                                                   ['run_index=0',
                                                                                    'trial_ranges=[[0, -1]]',
                                                                                    'trial_phase_range=[0, -1]',
                                                                                    "data_type='velocity_xy'",
                                                                                    'scaling_factor=1.0'],
                                                                                   ''),
                                                                                  ('find_saccades_per_trial_for_run',
                                                                                   ['run_index=0',
                                                                                    'trial_phase_range=[1, 4]',
                                                                                    'trial_ranges=[[0, 80]]',
                                                                                    'plot=True',
                                                                                    'save=True'],
                                                                                   '\n\t\tfinds saccades in a session \n\t\t'),
                                                                                  ('find_saccades_per_trial_for_all_runs',
                                                                                   ['trial_phase_range=[1, 4]',
                                                                                    'trial_ranges=[[0, 80]]',
                                                                                    'plot=True'],
                                                                                   '')],
                                                                      'properties': ['ID',
                                                                                     'subject',
                                                                                     'project_name',
                                                                                     'experiment_name',
                                                                                     'wildcard',
                                                                                     'base_directory',
                                                                                     'hdf5_filename',
                                                                                     'saccade_dtype',
                                                                                     'loggingLevel',
                                                                                     'logger']},
             'Tools.Sessions.EyeLinkSession.SASession': {'bases': ['Tools.Sessions.EyeLinkSession.EyeLinkSession'],
                                                         'constructor': [],
                                                         'docstring': 'Saccade adaptation session',
                                                         'methods': [('plot_velocity_per_trial_for_run',
                                                                      ['run_index=0',
                                                                       'trial_phase_range=[1, 4]',
                                                                       'trial_ranges=[[25, 125], [125, 185], [185, 245]]',
                                                                       "colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']",
                                                                       'nr_plot_points=1000'],
                                                                      'create a single - file pdf plotting the normed velocity of the eye position in all trials'),
                                                                     ('plot_all_saccades_for_run',
                                                                      ['run_index=0',
                                                                       'trial_phase_range=[1, -1]',
                                                                       'trial_ranges=[[25, 125], [125, 185], [185, 245]]',
                                                                       "colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']",
                                                                       'nr_plot_points=1000'],
                                                                      ''),
                                                                     ('find_saccades_per_trial_for_run',
                                                                      ['run_index=0',
                                                                       'trial_phase_range=[1, 4]',
                                                                       'trial_ranges=[[25, 125], [125, 185], [185, 245]]',
                                                                       'plot=False'],
                                                                      '\n\t\tfinds saccades in a session \n\t\t'),
                                                                     ('plot_velocity_per_trial_all_runs',
                                                                      ['trial_phase_range=[1, 4]',
                                                                       'trial_ranges=[[25, 125], [125, 185], [185, 245]]',
                                                                       "colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']",
                                                                       'nr_plot_points=1000'],
                                                                      ''),
                                                                     ('analyze_saccades_for_run',
                                                                      ['run_index=0',
                                                                       'trial_phase_range=[1, 4]',
                                                                       'trial_ranges=[[25, 125], [125, 185], [185, 245]]',
                                                                       "colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']",
                                                                       'plot_saccades=False',
                                                                       "which_saccade_detection_procedure='el'",
                                                                       'gain_threshold=0.6'],
                                                                      ''),
                                                                     ('analyze_microsaccades_for_run',
                                                                      ['run_index=0',
                                                                       'trial_phase_range=[1, 4]',
                                                                       'trial_ranges=[[25, 125], [125, 185], [185, 245]]',
                                                                       "colors=['b', 'g', 'r', 'c', 'm', 'y', 'k']"],
                                                                      ''),
                                                                     ('analyze_microsaccades_for_trial',
                                                                      ['parameters',
                                                                       'saccades',
                                                                       'parameter_saccades',
                                                                       'xy_data',
                                                                       'vel_data'],
                                                                      '\n\t\tTakes all the data for a given trial, i.e. parameters, eyelink gaze and velocity data, el_saccades and so forth.\n\t\tDistills the necessary parameters for this trial, such as saccade amplitude and the like.\n\t\t'),
                                                                     ('analyze_saccades_for_trial',
                                                                      ['parameters',
                                                                       'saccades',
                                                                       'parameter_saccades',
                                                                       'xy_data',
                                                                       'vel_data'],
                                                                      '\n\t\tTakes all the data for a given trial, i.e. parameters, eyelink gaze and velocity data, el_saccades and so forth.\n\t\tDistills the necessary parameters for this trial, such as saccade amplitude and the like.\n\t\t'),
                                                                     ('distill_saccades_from_parameters',
                                                                      ['parameter_data=None'],
                                                                      '')],
                                                         'properties': []},
             'Tools.Sessions.EyeLinkSession.SB_AMSession': {'bases': ['Tools.Sessions.EyeLinkSession.EyeLinkSession'],
                                                            'constructor': [],
                                                            'docstring': 'docstring for Split brain AM Session',
                                                            'methods': [('process_behavioral_data',
                                                                         ['run=None',
                                                                          'masking_array=None'],
                                                                         'docstring for preprocess_behavioral_data'),
                                                                        ('plot_conditions',
                                                                         ['plot_range=None',
                                                                          'run=None',
                                                                          'conditions=[1, 2, 0, 3, 4]'],
                                                                         'docstring for plot_conditions'),
                                                                        ('order_conditions',
                                                                         ['plot_range=None',
                                                                          'run=None',
                                                                          'conditions=[1, 2, 0, 3, 4]'],
                                                                         'docstring for plot_conditions'),
                                                                        ('import_distilled_behavioral_results',
                                                                         ['run=None'],
                                                                         'import results from psychometric pickle file'),
                                                                        ('EL_analysis',
                                                                         ['screen_center=[840, 525]',
                                                                          'plot=False',
                                                                          'display_latency=5.6'],
                                                                         'docstring for EL_analysis'),
                                                                        ('analyze_after_EL_split',
                                                                         ['nr_bins=3',
                                                                          'max_aspect_ratio=3.0'],
                                                                         'docstring for analyze_after_EL_split(')],
                                                            'properties': ['hvrs',
                                                                           'cd',
                                                                           'pfs',
                                                                           'fit_data',
                                                                           'all_fixation_deviations']},
             'Tools.Sessions.EyeLinkSession.SB_AM_Control_Session': {'bases': ['Tools.Sessions.EyeLinkSession.SB_AMSession'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('process_behavioral_data',
                                                                                  ['run=None'],
                                                                                  'docstring for preprocess_behavioral_data')],
                                                                     'properties': []},
             'Tools.Sessions.EyeLinkSession.TAESession': {'bases': ['Tools.Sessions.EyeLinkSession.EyeLinkSession'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('preprocess_behavioral_data',
                                                                       [],
                                                                       'docstring for preprocess_behavioral_data'),
                                                                      ('fit_condition',
                                                                       ['boolean_array',
                                                                        'sub_plot',
                                                                        'title',
                                                                        'plot_range=[-5, 5]',
                                                                        "x_label=''",
                                                                        "y_label=''",
                                                                        'make_plot=True',
                                                                        'create_globals=True'],
                                                                       'fits the data in self.parameter_data[boolean_array] with a standard TAE psychometric curve and plots the data and result in sub_plot. It sets the title of the subplot, too.'),
                                                                      ('normalize_and_fit_confidence',
                                                                       ['test_orientations',
                                                                        'confidence_ratings_per_test_orientation',
                                                                        'start_value_mu=0'],
                                                                       ''),
                                                                      ('plot_confidence',
                                                                       ['boolean_array',
                                                                        'sub_plot',
                                                                        'normalize_confidence=False',
                                                                        'plot_range=[-5, 5]',
                                                                        "y_label=''",
                                                                        'TAE=0'],
                                                                       "plots the confidence data in self.parameter_data[boolean_array] in sub_plot. It doesn't set the title of the subplot."),
                                                                      ('run_temporal_conditions',
                                                                       [],
                                                                       '\n\t\trun across conditions and adaptation durations\n\t\t'),
                                                                      ('run_temporal_conditions_joined',
                                                                       [],
                                                                       '\n\t\trun across conditions and adaptation durations\n\t\t'),
                                                                      ('run_orientation_noise_conditions',
                                                                       [],
                                                                       ''),
                                                                      ('run_random_duration_conditions',
                                                                       [],
                                                                       ''),
                                                                      ('run_eccentricity_test',
                                                                       [],
                                                                       '\n\t\tAnalyze correct/incorrect responses \n\t\t'),
                                                                      ('save_fit_results',
                                                                       ["suffix=''"],
                                                                       'docstring for save_fit_results'),
                                                                      ('import_distilled_behavioral_data',
                                                                       ["run_name='run_'",
                                                                        "results_name=''"],
                                                                       '')],
                                                          'properties': ['rectified_answers',
                                                                         'rectified_test_orientations',
                                                                         'adaptation_frequencies',
                                                                         'adaptation_durations',
                                                                         'test_orientations',
                                                                         'test_orientation_indices',
                                                                         'rectified_test_orientation_indices',
                                                                         'psychometric_data',
                                                                         'TAEs',
                                                                         'pfs',
                                                                         'confidence_ratings',
                                                                         'conditions',
                                                                         'confidence_minima',
                                                                         'noise_widths',
                                                                         'absolute_adaptation_orientations',
                                                                         'thresholds',
                                                                         'stimulus_positions',
                                                                         'spatial_frequencies',
                                                                         'all_corrects',
                                                                         'all_eccentricities',
                                                                         'eccentricities']},
             'Tools.Sessions.EyeLinkSession.TEAESession': {'bases': ['Tools.Sessions.EyeLinkSession.EyeLinkSession'],
                                                           'constructor': [],
                                                           'docstring': 'TEAESession analyzes the results of TEAE experiments',
                                                           'methods': [('preprocess_behavioral_data',
                                                                        [],
                                                                        'docstring for preprocess_behavioral_data'),
                                                                       ('fit_condition',
                                                                        ['boolean_array',
                                                                         'sub_plot',
                                                                         'title',
                                                                         'plot_range=[-2.8, -1.5]',
                                                                         "x_label=''",
                                                                         "y_label=''",
                                                                         "colors=['r', 'k']"],
                                                                        'fits the data in self.parameter_data[boolean_array] with a standard TAE psychometric curve and plots the data and result in sub_plot. It sets the title of the subplot, too.'),
                                                                       ('plot_confidence_for_condition',
                                                                        ['boolean_array',
                                                                         'sub_plot',
                                                                         'title',
                                                                         'plot_range=[-2.8, -1.5]',
                                                                         "x_label=''",
                                                                         "y_label=''",
                                                                         "colors=['r', 'k']"],
                                                                        ''),
                                                                       ('plot_staircases_for_condition',
                                                                        ['boolean_array',
                                                                         'sub_plot',
                                                                         "color='b'",
                                                                         'plot_range=[-2.8, -1.5]'],
                                                                        ''),
                                                                       ('run_training_analysis',
                                                                        ['run_nr=0'],
                                                                        ''),
                                                                       ('run_time_analysis',
                                                                        ['run_nr=None'],
                                                                        '')],
                                                           'properties': ['test_contrasts',
                                                                          'adaptation_orientations',
                                                                          'test_orientations',
                                                                          'adaptation_durations',
                                                                          'phase_redraw_periods',
                                                                          'psychometric_data',
                                                                          'conditions',
                                                                          'TEAEs',
                                                                          'pfs']},
             'Tools.Sessions.LatencyRemappingSession.LatencyRemappingSession': {'bases': ['Tools.Sessions.LatencyRemappingSession.Session'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('saccade_latency_analysis_all_runs',
                                                                                             ['plot=True'],
                                                                                             ''),
                                                                                            ('mapper_feat_analysis',
                                                                                             ['run_separate=True',
                                                                                              'run_combination=True'],
                                                                                             ''),
                                                                                            ('saccade_latency_analysis_one_run',
                                                                                             ['run',
                                                                                              'plot=False'],
                                                                                             ''),
                                                                                            ('saccade_latency_analysis_one_run_new',
                                                                                             ['run',
                                                                                              'plot=False',
                                                                                              "postFix=['mcf']"],
                                                                                             ''),
                                                                                            ('decode_from_roi',
                                                                                             ['roi',
                                                                                              'threshold=3.5',
                                                                                              "mask_type='center_Z_contrast_joined'",
                                                                                              "mask_direction='pos'"],
                                                                                             'docstring for fname'),
                                                                                            ('times_all_runs',
                                                                                             ['nr_bins=2',
                                                                                              "latency_type='saccade'"],
                                                                                             ''),
                                                                                            ('deconvolve_roi',
                                                                                             ['roi',
                                                                                              'threshold=3.5',
                                                                                              "mask_type='center_Z_contrast_joined'",
                                                                                              "mask_direction='pos'",
                                                                                              "event_type='binned_saccade_onsets'",
                                                                                              "color='b'",
                                                                                              "latency_type='saccade'",
                                                                                              'permute=False',
                                                                                              'nr_permutations=250',
                                                                                              'sample_interval=0.375'],
                                                                                             ''),
                                                                                            ('deconvolve_roi_new',
                                                                                             ['roi',
                                                                                              'threshold=3.5',
                                                                                              'nr_bins=2',
                                                                                              "mask_type='center_Z_contrast_joined'",
                                                                                              "mask_direction='pos'",
                                                                                              "event_type='sacc_latency'",
                                                                                              "color='b'",
                                                                                              'permute=False',
                                                                                              'nr_permutations=1000',
                                                                                              'sample_interval=0.375',
                                                                                              'plot_pca=0'],
                                                                                             ''),
                                                                                            ('single_trial_glm_film',
                                                                                             ["latency_type='saccade'",
                                                                                              "types=('mapper', 'remap')"],
                                                                                             ''),
                                                                                            ('single_saccade_glm_roi',
                                                                                             ['roi',
                                                                                              'threshold=3.5',
                                                                                              "mask_type='center_Z_contrast_joined'",
                                                                                              "mask_direction='pos'",
                                                                                              "latency_type='saccade'"],
                                                                                             'docstring for single_saccade_glm_roi'),
                                                                                            ('single_saccade_glm',
                                                                                             ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4', 'lateraloccipital', 'superiorparietal']"],
                                                                                             'docstring for single_saccade_glm'),
                                                                                            ('deconvolve',
                                                                                             ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4', 'lateraloccipital', 'inferiorparietal', 'superiorparietal']",
                                                                                              'nr_bins=2',
                                                                                              'permute=False'],
                                                                                             'docstring for deconvolve'),
                                                                                            ('times_for_run',
                                                                                             ['run',
                                                                                              'saccade_latency_range=[17, 2500]',
                                                                                              "latency_type='saccade'"],
                                                                                             ''),
                                                                                            ('behavioral_data_from_hdf',
                                                                                             ['h5file=None',
                                                                                              'run_array=None',
                                                                                              "postFix=['mcf']",
                                                                                              'plot=False'],
                                                                                             '\n\t\tget the behavioral data from an hdf file. \n\t\tThis will create arrays for saccade timings, stimulus onsets and the like across the runs in run_array\n\t\tIf run_array is left None, all remap runs are taken. \n\t\tif plot, we plot the saccade latency and stimulus offset, saccade offset distributions\n\t\t'),
                                                                                            ('mapper_feat_analysis_one_run',
                                                                                             ['run',
                                                                                              'run_feat=True',
                                                                                              "postFix=['mcf']"],
                                                                                             ''),
                                                                                            ('mask_stats_to_hdf',
                                                                                             ["run_type='mapper'",
                                                                                              "postFix=['mcf']"],
                                                                                             '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                            ('hdf5_file',
                                                                                             ['run_type'],
                                                                                             ''),
                                                                                            ('roi_data_from_hdf',
                                                                                             ['h5file',
                                                                                              'run',
                                                                                              'roi_wildcard',
                                                                                              'data_type',
                                                                                              "postFix=['mcf']"],
                                                                                             '\n\t\tdrags data from an already opened hdf file into a numpy array, concatenating the data_type data across voxels in the different rois that correspond to the roi_wildcard\n\t\t'),
                                                                                            ('project_stats',
                                                                                             ["which_file='zstat'",
                                                                                              "postFix=['mcf']"],
                                                                                             '')],
                                                                                'properties': ['mapper_parameter_data',
                                                                                               'saccade_dtype',
                                                                                               'hdf5_filename',
                                                                                               'cutoff_latencies',
                                                                                               'stim_times',
                                                                                               'binned_sacc_times',
                                                                                               'bins_means_sl',
                                                                                               'bins_means_sosl',
                                                                                               'all_joined_sacc_timings',
                                                                                               'all_trial_parameters_and_saccades']},
             'Tools.Sessions.OrientationDecisionSession.OrientationDecisionSession': {'bases': ['Tools.Sessions.OrientationDecisionSession.RetinotopicMappingSession'],
                                                                                      'constructor': [],
                                                                                      'docstring': '\n\tClass for orientation decision decoding sessions analysis.\n\tForks from retinotopic mapping session primarily because of phase-encoded mapping runs. \n\tInvolves trial- and run-based support vector regression/decoding of orientation around =/- 45.\n\t',
                                                                                      'methods': [('analyze_one_run_behavior',
                                                                                                   ['run',
                                                                                                    "decision_type='binary'",
                                                                                                    'output_fsl_files=True'],
                                                                                                   "\n\t\tTakes a pickle file - the run's behavioral file (ending in .dat) - opens and analyzes it. \n\t\tIt saves an fsl-style text file with regressors, and adds parameters, events and response times to the session's hdf5 file.\n\t\tthe orientation file is a .dat pickle file, that has to be opened in unicode mode.\n\t\t"),
                                                                                                  ('analyze_runs_for_regressors',
                                                                                                   ["postFix=['mcf', 'tf']",
                                                                                                    'per_run_feat=True',
                                                                                                    'apply_reg=True',
                                                                                                    'all_feat=True',
                                                                                                    'run_behavior=True'],
                                                                                                   'docstring for analyze_runs_for_regressors'),
                                                                                                  ('stats_to_surf',
                                                                                                   ["which_file='zstat'"],
                                                                                                   ''),
                                                                                                  ('mask_stats_to_hdf',
                                                                                                   ["run_type='decision'",
                                                                                                    "postFix=['mcf', 'tf']"],
                                                                                                   '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                                  ('run_glm_on_hdf5',
                                                                                                   ['run_list=None',
                                                                                                    'hdf5_file=None',
                                                                                                    "data_type='hpf_data'",
                                                                                                    "analysis_type='per_trial'",
                                                                                                    "post_fix_for_text_file=['all']"],
                                                                                                   ''),
                                                                                                  ('per_trial_data_from_run',
                                                                                                   ['run',
                                                                                                    'h5file',
                                                                                                    'roi',
                                                                                                    "data_type='betas'",
                                                                                                    "postFix=['mcf', 'tf']"],
                                                                                                   ''),
                                                                                                  ('per_trial_data',
                                                                                                   ['h5file',
                                                                                                    'roi',
                                                                                                    "data_type='betas'",
                                                                                                    "postFix=['mcf', 'tf']"],
                                                                                                   ''),
                                                                                                  ('svr_roi',
                                                                                                   ['h5file',
                                                                                                    'roi',
                                                                                                    "data_type='betas'",
                                                                                                    "mask_data_type='mapper_logp'",
                                                                                                    'mask_threshold=3.0',
                                                                                                    "mask_function='__gt__'",
                                                                                                    'stim_position=1',
                                                                                                    "postFix=['mcf', 'tf']"],
                                                                                                   "\n\t\tsvr_roi conducts an svr analysis on 'data_type' data from a certain 'roi'. \n\t\tthis roi is masked using a 'mask_data_type', which is masked at a 'mask_threshold' with a 'mask_function'.\n\t\tonly data from trials with a certain stimulus position (L vs R) are used for this analysis. so, this function has to be run twice, \n\t\tonce for when an roi is empty and once for when it contained the stimulus.\n\t\t\n\t\t")],
                                                                                      'properties': ['hdf5_filename']},
             'Tools.Sessions.PupilSession.across_subject_stats': {'bases': [],
                                                                  'constructor': ['experiment',
                                                                                  'this_dir',
                                                                                  'sample_rate',
                                                                                  'downsample_rate',
                                                                                  'these_subjects',
                                                                                  'number_runs'],
                                                                  'docstring': '',
                                                                  'methods': [('PPR_amplitude_stats',
                                                                               ["use='ppd_lin'",
                                                                                "indices='all'"],
                                                                               ''),
                                                                              ('BPD_stats',
                                                                               [],
                                                                               ''),
                                                                              ('ANOVA', [], ''),
                                                                              ('correlation_PPRa_BPD',
                                                                               [],
                                                                               ''),
                                                                              ('collapsed_response_figure',
                                                                               [],
                                                                               ''),
                                                                              ('pupil_GLM',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['experiment',
                                                                                 'this_dir',
                                                                                 'sample_rate',
                                                                                 'downsample_rate',
                                                                                 'subject',
                                                                                 'number_runs',
                                                                                 'test_contrast_per_run',
                                                                                 'stimulus_present',
                                                                                 'answer_yes',
                                                                                 'answer_no',
                                                                                 'correct',
                                                                                 'incorrect',
                                                                                 'hit',
                                                                                 'fa',
                                                                                 'miss',
                                                                                 'cr',
                                                                                 'bpd',
                                                                                 'ppd',
                                                                                 'ppd_mean',
                                                                                 'ppd_lin',
                                                                                 'ppd_lin_RT',
                                                                                 'ppd_feed_lin',
                                                                                 'response_time',
                                                                                 'confidence',
                                                                                 'confidence_0',
                                                                                 'confidence_1',
                                                                                 'confidence_2',
                                                                                 'confidence_3',
                                                                                 'd_prime_per_run',
                                                                                 'd_prime_overall',
                                                                                 'criterion_per_run',
                                                                                 'criterion_overall',
                                                                                 'sign_template',
                                                                                 'YES',
                                                                                 'NO',
                                                                                 'CORRECT',
                                                                                 'INCORRECT',
                                                                                 'PRESENT',
                                                                                 'ABSENT',
                                                                                 'BPD',
                                                                                 'PPD',
                                                                                 'PPD_MEAN',
                                                                                 'PPD_LIN',
                                                                                 'PPD_LIN_RT',
                                                                                 'PPD_FEED_LIN',
                                                                                 'liberal_indices',
                                                                                 'conservative_indices',
                                                                                 'SUBJECT',
                                                                                 'LIBERAL']},
             'Tools.Sessions.PupilSession.make_dataframe': {'bases': [],
                                                            'constructor': ['subject',
                                                                            'experiment',
                                                                            'version',
                                                                            'number_runs',
                                                                            'this_dir',
                                                                            'sample_rate',
                                                                            'downsample_rate'],
                                                            'docstring': '',
                                                            'methods': [('data_frame', [], '')],
                                                            'properties': ['subject',
                                                                           'experiment',
                                                                           'version',
                                                                           'number_runs',
                                                                           'this_dir',
                                                                           'sample_rate',
                                                                           'downsample_rate']},
             'Tools.Sessions.PupilSession.preprocessing': {'bases': [],
                                                           'constructor': ['subject',
                                                                           'experiment',
                                                                           'version',
                                                                           'this_dir',
                                                                           'sample_rate',
                                                                           'downsample_rate'],
                                                           'docstring': "\n\tMake_HDF5:\n\t- Make HDF5 from raw edf files. All runs are put in one hdf5 file.\n\t\n\tPreprocessing:\n\t- Detect ITI's (+1 seconds; every trial started with 2.5-4.5 s delay, so no useful info in first second of trial), and make pupil diameter 0.\n\t- Detect blinks, and make pupil diameter 0.\n\t- Detect whether ITI and blinks are within 0.5 s of each other. If so, merge them by making 0.  \n\t- Remove 'zero-gaps' (blinks + ITI) by linear interpolation. \n\t- High pass, low pass, band pass pupil diameter.\n\t- Detect omissions (per trial) based on eye movements.\n\t- Detect omissions (per trial) based on blinks.\n\t- Zscore pupil diameter.\n\t- Create time-locked arrays.\n\t- Make regressor files.\n\t",
                                                           'methods': [('make_HDF5', [], ''),
                                                                       ('preproces_run',
                                                                        ['this_run'],
                                                                        ''),
                                                                       ('preproces_for_GLM',
                                                                        ['this_run'],
                                                                        '')],
                                                           'properties': ['subject',
                                                                          'experiment',
                                                                          'version',
                                                                          'this_dir',
                                                                          'sample_rate',
                                                                          'downsample_rate',
                                                                          'this_run']},
             'Tools.Sessions.PupilSession.within_subjects_stats': {'bases': [],
                                                                   'constructor': ['subject',
                                                                                   'experiment',
                                                                                   'version',
                                                                                   'number_runs',
                                                                                   'this_dir',
                                                                                   'sample_rate',
                                                                                   'downsample_rate'],
                                                                   'docstring': '',
                                                                   'methods': [('PPR_amplitude_stats',
                                                                                ['use_ppd_lin=True'],
                                                                                ''),
                                                                               ('PPR_amplitude_stats_confidence',
                                                                                ['use_ppd_lin=True'],
                                                                                ''),
                                                                               ('BPD_stats',
                                                                                [],
                                                                                ''),
                                                                               ('response_figure_stimulus',
                                                                                [],
                                                                                ''),
                                                                               ('response_figure_stimulus_confidence',
                                                                                ['split_by_SDT=False'],
                                                                                ''),
                                                                               ('response_figure_response',
                                                                                [],
                                                                                ''),
                                                                               ('response_figure_response_confidence',
                                                                                ['split_by_SDT=False'],
                                                                                ''),
                                                                               ('response_figure_feedback',
                                                                                [],
                                                                                ''),
                                                                               ('PPR_feedback_amplitude_stats',
                                                                                ['use_ppd_lin=True'],
                                                                                ''),
                                                                               ('PPR_feedback_amplitude_stats_confidence',
                                                                                [],
                                                                                ''),
                                                                               ('pupil_GLM',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['subject',
                                                                                  'experiment',
                                                                                  'version',
                                                                                  'number_runs',
                                                                                  'this_dir',
                                                                                  'sample_rate',
                                                                                  'downsample_rate',
                                                                                  'stimulus_locked_array',
                                                                                  'response_locked_array',
                                                                                  'feedback_locked_array',
                                                                                  'd_prime_overall',
                                                                                  'criterion_overall',
                                                                                  'test_contrast_per_run',
                                                                                  'number_trials_per_run',
                                                                                  'd_prime_per_run',
                                                                                  'd_prime__perrun',
                                                                                  'criterion_per_run',
                                                                                  'number_of_runs',
                                                                                  'response_time',
                                                                                  'stimulus_present',
                                                                                  'answer_yes',
                                                                                  'answer_no',
                                                                                  'correct',
                                                                                  'incorrect',
                                                                                  'hit',
                                                                                  'fa',
                                                                                  'miss',
                                                                                  'cr',
                                                                                  'confidence',
                                                                                  'confidence_0',
                                                                                  'confidence_1',
                                                                                  'confidence_2',
                                                                                  'confidence_3',
                                                                                  'bpd_feed',
                                                                                  'ppd_feed',
                                                                                  'ppd_feed_mean',
                                                                                  'ppd_feed_lin',
                                                                                  'bpd',
                                                                                  'ppd',
                                                                                  'ppd_mean',
                                                                                  'ppd_lin',
                                                                                  'ppd_lin_RT']},
             'Tools.Sessions.RetinotopicMappingSession.RetinotopicMappingSession': {'bases': ['Tools.Sessions.RetinotopicMappingSession.Session'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [('parcelateConditions',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('retinotopicMapping',
                                                                                                 ["postFix=['mcf']",
                                                                                                  'perCondition=True',
                                                                                                  'perRun=False',
                                                                                                  'runMapping=True',
                                                                                                  'toSurf=True'],
                                                                                                 "\n\t\truns retinotopic mapping on all runs in self.conditionDict['polar'] and self.conditionDict['eccen']\n\t\t"),
                                                                                                ('convertVolumeToSurface',
                                                                                                 ['surfSmoothingFWHM=0.0'],
                                                                                                 ''),
                                                                                                ('convertSurfaceToVolume',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('runQC',
                                                                                                 ["rois=['V1', 'V2', 'V3']"],
                                                                                                 '\n\t\tQuality control for this session would mean to have a look at SNR in different areas\n\t\trunQC assumes a list of masks is in place in the processed/mri/masks folder and runs separate analyses for each of these ROIs\n\t\t'),
                                                                                                ('makeTiffsFromCondition',
                                                                                                 ['condition',
                                                                                                  'y_rotation=90.0',
                                                                                                  'exit_when_ready=1'],
                                                                                                 '')],
                                                                                    'properties': ['mappingTypeDict',
                                                                                                   'mappingTypes',
                                                                                                   'opfNameList']},
             'Tools.Sessions.RetinotopicRemappingSession.RetinotopicRemappingSession': {'bases': ['Tools.Sessions.RetinotopicRemappingSession.RetinotopicMappingSession'],
                                                                                        'constructor': [],
                                                                                        'docstring': '',
                                                                                        'methods': [('runQC',
                                                                                                     ["rois=['V1', 'V2', 'V3']"],
                                                                                                     '\n\t\tQuality control for this session would mean to have a look at SNR in different areas\n\t\trunQC assumes a list of masks is in place in the processed/mri/masks folder and runs separate analyses for each of these ROIs\n\t\t'),
                                                                                                    ('primaryEyeDataAnalysis',
                                                                                                     [],
                                                                                                     '\n\t\tTake the eye movement data for the runs in this session\n\t\t'),
                                                                                                    ('secondaryEyeMovementAnalysis',
                                                                                                     ['run_index=0',
                                                                                                      'wanted_sample_frequency=60'],
                                                                                                     ''),
                                                                                                    ('moreEyeMovementAnalysis',
                                                                                                     ['threshold=100',
                                                                                                      'moving_mean_width_on_velocity=2',
                                                                                                      'stim_offset=0.1',
                                                                                                      'sample_frequency=60.0'],
                                                                                                     ''),
                                                                                                    ('ASL_file_analysis',
                                                                                                     ['filename',
                                                                                                      'threshold=0.4',
                                                                                                      'moving_mean_width_on_velocity=4',
                                                                                                      'stim_offset=0.1'],
                                                                                                     ''),
                                                                                                    ('createFunctionalMask',
                                                                                                     ['exclusionThreshold=2.0',
                                                                                                      'maskFrame=0',
                                                                                                      'inclusion_threshold=4.0'],
                                                                                                     '\n\t\tTake the eccen F-values, use as a mask, and take out the F-value mask of the peripheral fixation condition\n\t\tresults in creation of a mask file which can be accessed later\n\t\t'),
                                                                                                    ('collectConditionFiles',
                                                                                                     ['add_eccen=True'],
                                                                                                     '\n\t\tReturns the highest-level selfreqavg output files for the conditions in conditionDict\n\t\t'),
                                                                                                    ('collectRunFiles',
                                                                                                     [],
                                                                                                     '\n\t\tReturns the lower-level selfreqavg output files for the conditions in conditionDict\n\t\t'),
                                                                                                    ('rescaleEccenFile',
                                                                                                     ['phase_offset=0.0',
                                                                                                      'phase_to_degree_ratio=1.0'],
                                                                                                     'docstring for rescaleEccenFile'),
                                                                                                    ('maskFiles',
                                                                                                     ['dataFiles',
                                                                                                      'maskFile=None',
                                                                                                      'maskThreshold=5.0',
                                                                                                      'maskFrame=0',
                                                                                                      'nrVoxels=False',
                                                                                                      'flat=False'],
                                                                                                     ''),
                                                                                                    ('conditionDataForRegions',
                                                                                                     ["regions=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                      "maskFile='polar_mask-1.5.nii.gz'",
                                                                                                      'nrVoxels=False',
                                                                                                      'maskThreshold=4.0',
                                                                                                      'add_eccen=False'],
                                                                                                     "\n\t\tProduce phase-phase correlation plots across conditions.\n\t\t['rh.V1', 'lh.V1', 'rh.V2', 'lh.V2', 'rh.V3', 'lh.V3', 'rh.V3AB', 'lh.V3AB', 'rh.V4', 'lh.V4']\n\t\t['V1', 'V2', 'V3', 'V3AB', 'V4']\n\t\t['V1','V2','V3'],['V3AB','V4'],['lateraloccipital','lingual','fusiform'],['cuneus','precuneus','inferiorparietal','superiorparietal']\n\t\t['V1'],['V2'],['V3'],['V3AB'],['V4'],['fusiform'],['superiorparietal']\n\t\t['pericalcarine','lateraloccipital','lingual','fusiform','cuneus','precuneus','inferiorparietal', 'superiorparietal']\n\t\t"),
                                                                                                    ('runDataForRegions',
                                                                                                     ["regions=[['V1'], ['V2'], ['V3'], ['V3AB'], ['V4']]",
                                                                                                      "maskFile='polar_mask-1.5.nii.gz'",
                                                                                                      'maskThreshold=4.0',
                                                                                                      'nrVoxels=False'],
                                                                                                     "\n\t\tProduce phase-phase correlation plots across conditions.\n\t\t['rh.V1', 'lh.V1', 'rh.V2', 'lh.V2', 'rh.V3', 'lh.V3', 'rh.V3AB', 'lh.V3AB', 'rh.V4', 'lh.V4']\n\t\t['V1', 'V2', 'V3', 'V3AB', 'V4']\n\t\t['pericalcarine','lateraloccipital','lingual','fusiform','cuneus','precuneus','inferiorparietal', 'superiorparietal']\n\t\t"),
                                                                                                    ('eyeDataForRuns',
                                                                                                     [],
                                                                                                     '\n\t\tGet eye data from runs in the same sequence as the runDataForRegions function\n\t\t'),
                                                                                                    ('eyeContingentRemappingPerRun',
                                                                                                     [],
                                                                                                     'analyze the remapping signal per run, and correlate this with the saccade and fixation errors.'),
                                                                                                    ('phasePhasePlots',
                                                                                                     ['nrBins=10'],
                                                                                                     ''),
                                                                                                    ('phaseDistributionPlots',
                                                                                                     [],
                                                                                                     ''),
                                                                                                    ('significanceSignificancePlots',
                                                                                                     [],
                                                                                                     ''),
                                                                                                    ('fitPhaseDifferences',
                                                                                                     ["comparisons=[['sacc_map', 'fix_map'], ['sacc_map', 'remap'], ['sacc_map', 'fix_periphery']]",
                                                                                                      'maskThreshold=4.0',
                                                                                                      'nrVoxels=False',
                                                                                                      'runBootstrap=False',
                                                                                                      'nrBootstrapRepetitions=1000'],
                                                                                                     ''),
                                                                                                    ('fitPhaseDifferencesZeroMean',
                                                                                                     ["comparisons=[['sacc_map', 'fix_map'], ['sacc_map', 'remap'], ['sacc_map', 'fix_periphery']]",
                                                                                                      'maskThreshold=4.0',
                                                                                                      'nrVoxels=False',
                                                                                                      'runBootstrap=True',
                                                                                                      'nrBootstrapRepetitions=1000'],
                                                                                                     ''),
                                                                                                    ('collapsePhaseDifferences',
                                                                                                     ["comparisons=[['sacc_map', 'fix_map'], ['sacc_map', 'remap'], ['sacc_map', 'fix_periphery'], ['sacc_map', 'remap']]",
                                                                                                      'maskThreshold=4.0',
                                                                                                      'nrVoxels=False'],
                                                                                                     ''),
                                                                                                    ('phaseDifferencesPerPhase',
                                                                                                     ["comparisons=[['fix_map', 'sacc_map'], ['fix_map', 'remap'], ['fix_map', 'fix_periphery']]",
                                                                                                      "baseCondition='sacc_map'",
                                                                                                      'binSize=32',
                                                                                                      'maskThreshold=4.0',
                                                                                                      'smooth=True',
                                                                                                      'smoothSize=12',
                                                                                                      'stretch=1.0'],
                                                                                                     ''),
                                                                                                    ('collapsePhaseDifferencesPerPhase',
                                                                                                     ["comparisons=[['sacc_map', 'fix_map'], ['sacc_map', 'remap'], ['sacc_map', 'fix_periphery']]",
                                                                                                      "baseCondition='fix_map'",
                                                                                                      'binSize=0.5',
                                                                                                      'nrBins=100',
                                                                                                      'maskThreshold=5.0'],
                                                                                                     ''),
                                                                                                    ('collapsePhaseDifferencesHorVer',
                                                                                                     ["comparisons=[['sacc_map', 'fix_map'], ['sacc_map', 'remap'], ['sacc_map', 'fix_periphery']]",
                                                                                                      "baseCondition='fix_map'",
                                                                                                      'nrBins=8',
                                                                                                      'maskThreshold=3.0'],
                                                                                                     ''),
                                                                                                    ('combinationsPhaseDifferences',
                                                                                                     ["comparisons=[['fix_map', 'sacc_map'], ['fix_map', 'remap'], ['fix_map', 'fix_periphery'], ['sacc_map', 'remap'], ['sacc_map', 'fix_periphery']]",
                                                                                                      'maskThreshold=3.0',
                                                                                                      'nrVoxels=False'],
                                                                                                     ''),
                                                                                                    ('runEyeMovementControlsForRemapping',
                                                                                                     ["regions=[['V1'], ['V2'], ['V3'], ['V3AB'], ['V4']]",
                                                                                                      "maskFile='polar_mask-1.5.nii.gz'",
                                                                                                      'nrVoxels=False',
                                                                                                      'maskThreshold=4.0'],
                                                                                                     ''),
                                                                                                    ('wholeBrainComparisons',
                                                                                                     ["comparisons=[['fix_map', 'sacc_map'], ['fix_map', 'remap'], ['fix_map', 'fix_periphery'], ['sacc_map', 'remap']]"],
                                                                                                     'docstring for wholeBrainComparisons'),
                                                                                                    ('smoothRoiDataOverTime',
                                                                                                     ['data',
                                                                                                      'start',
                                                                                                      'end',
                                                                                                      'width=1',
                                                                                                      'start_out=4',
                                                                                                      'end_out=4'],
                                                                                                     ''),
                                                                                                    ('phaseDecodingFromBaseConditionRoi',
                                                                                                     ['roi',
                                                                                                      "base_condition='sacc_map'",
                                                                                                      "test_conditions=['fix_map', 'remap', 'fix_periphery']",
                                                                                                      'subfigure=None',
                                                                                                      "color='k'"],
                                                                                                     ''),
                                                                                                    ('phaseDecodingConditionRoi',
                                                                                                     ['condition',
                                                                                                      'roi',
                                                                                                      'subfigure=None',
                                                                                                      "color='k'"],
                                                                                                     ''),
                                                                                                    ('phaseDecodingRoi',
                                                                                                     ['roi',
                                                                                                      "condition_array=['fix_map', 'sacc_map', 'remap', 'fix_periphery']",
                                                                                                      "colors=['r', 'm', 'g', 'b']",
                                                                                                      'subfigure=None',
                                                                                                      'figure=None'],
                                                                                                     ''),
                                                                                                    ('phaseDecodingRois',
                                                                                                     ["roi_array=['V1', 'V2', 'V3', 'V3AB', 'V4']"],
                                                                                                     ''),
                                                                                                    ('behavior',
                                                                                                     [],
                                                                                                     '')],
                                                                                        'properties': ['gazeDataDuringExpt',
                                                                                                       'eccenImage',
                                                                                                       'rois',
                                                                                                       'maskedConditionData',
                                                                                                       'maskedRunData',
                                                                                                       'histoResults',
                                                                                                       'combs',
                                                                                                       'bootstrapResults',
                                                                                                       'fitResults',
                                                                                                       'allPhaseDiffs',
                                                                                                       'phaseHists',
                                                                                                       'collapsedPhaseDiffs',
                                                                                                       'phasePhaseHistogramDict',
                                                                                                       'phasePhaseTotalDict',
                                                                                                       'collapsedPhaseDiffDict',
                                                                                                       'combinationFitResults',
                                                                                                       'maskedRemapData',
                                                                                                       'collapsedPhaseDiffsRemap']},
             'Tools.Sessions.RewardSessions.DualRewardSession.DualRewardSession': {'bases': ['Tools.Sessions.RewardSessions.DualRewardSession.SingleRewardSession'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('mask_stats_to_hdf',
                                                                                                ["run_type='reward'",
                                                                                                 "postFix=['mcf']",
                                                                                                 "version='orientation'"],
                                                                                                '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                               ('deconvolve_roi',
                                                                                                ['roi',
                                                                                                 'threshold=2.5',
                                                                                                 "mask_type='left_Z'",
                                                                                                 "analysis_type='deconvolution'",
                                                                                                 "mask_direction='pos'"],
                                                                                                '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                               ('deconvolve',
                                                                                                ['threshold=2.5',
                                                                                                 "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                 "analysis_type='deconvolution'"],
                                                                                                ''),
                                                                                               ('deconvolve_conditions_roi',
                                                                                                ['roi',
                                                                                                 'threshold=2.5',
                                                                                                 "analysis_type='deconvolution'"],
                                                                                                '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                               ('deconvolve_conditions',
                                                                                                ['threshold=2.5',
                                                                                                 "rois=['V1', 'V2', 'V3', 'V3AB']",
                                                                                                 "analysis_type='deconvolution'"],
                                                                                                ''),
                                                                                               ('whole_brain_deconvolution',
                                                                                                ['deco=True',
                                                                                                 'average_intervals=[[3.5, 12], [2, 7]]',
                                                                                                 'to_surf=True',
                                                                                                 "postFix=['mcf', 'tf', 'psc']"],
                                                                                                '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                               ('project_stats',
                                                                                                ["which_file='zstat'",
                                                                                                 "postFix=['mcf', 'tf']"],
                                                                                                ''),
                                                                                               ('rewarded_stimulus_run',
                                                                                                ['run',
                                                                                                 "postFix=['mcf', 'tf']"],
                                                                                                ''),
                                                                                               ('correlate_patterns_over_time_for_roi',
                                                                                                ['roi',
                                                                                                 "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                                 "data_type_mask='Z'",
                                                                                                 'mask_threshold=3.5',
                                                                                                 "mask_direction='pos'",
                                                                                                 "postFix=['mcf', 'tf']"],
                                                                                                ''),
                                                                                               ('correlate_patterns_over_time',
                                                                                                ["rois=['V1', 'V2', 'V3', 'V3AB']",
                                                                                                 "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                                 "data_type_mask='Z'",
                                                                                                 'mask_threshold=2.3',
                                                                                                 "mask_direction='pos'",
                                                                                                 "postFix=['mcf', 'tf']"],
                                                                                                ''),
                                                                                               ('decode_patterns_per_trial',
                                                                                                ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                 "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                                 "data_type_mask='Z'",
                                                                                                 'mask_threshold=3.5',
                                                                                                 "mask_direction='pos'",
                                                                                                 "postFix=['mcf', 'tf']"],
                                                                                                ''),
                                                                                               ('decode_patterns_per_trial_for_roi',
                                                                                                ['roi',
                                                                                                 "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                                 "data_type_mask='Z'",
                                                                                                 'mask_threshold=3.5',
                                                                                                 "mask_direction='pos'",
                                                                                                 "postFix=['mcf', 'tf']"],
                                                                                                ''),
                                                                                               ('import_stats_from_initial_session',
                                                                                                ['example_func_to_highres_file',
                                                                                                 'original_stat_folder',
                                                                                                 'nr_stat_files=4',
                                                                                                 "stat_file_names=['cope', 'tstat', 'pe', 'zstat']"],
                                                                                                '\n\t\t'),
                                                                                               ('pupil_responses_one_run',
                                                                                                ['run',
                                                                                                 'frequency',
                                                                                                 'sample_rate=2000',
                                                                                                 "postFix=['mcf', 'tf']",
                                                                                                 'analysis_duration=10'],
                                                                                                ''),
                                                                                               ('pupil_responses',
                                                                                                ['sample_rate=1000',
                                                                                                 'save_all=True'],
                                                                                                'docstring for pupil_responses'),
                                                                                               ('variance_from_whole_brain_residuals',
                                                                                                ['time_range_BOLD=[3.0, 9.0]',
                                                                                                 'var=True',
                                                                                                 'to_surf=True'],
                                                                                                ''),
                                                                                               ('fsl_results_to_deco_folder',
                                                                                                ["run_type='reward'",
                                                                                                 "postFix=['mcf', 'tf', 'orientation']"],
                                                                                                ''),
                                                                                               ('cross_correlate_pupil_and_BOLD_for_roi',
                                                                                                ['roi',
                                                                                                 'threshold=3.5',
                                                                                                 "mask_type='center_Z'",
                                                                                                 "mask_direction='pos'",
                                                                                                 'sample_rate=2000',
                                                                                                 'time_range_BOLD=[5.0, 10.0]',
                                                                                                 'time_range_pupil=[0.5, 2.0]',
                                                                                                 'stepsize=0.25',
                                                                                                 "area=''",
                                                                                                 'color=1.0'],
                                                                                                'docstring for correlate_pupil_and_BOLD'),
                                                                                               ('cross_correlate_pupil_and_BOLD',
                                                                                                ['threshold=3.5',
                                                                                                 "mask_type='center_Z'",
                                                                                                 "mask_direction='pos'",
                                                                                                 'sample_rate=2000',
                                                                                                 "time_range='long'"],
                                                                                                ''),
                                                                                               ('calculate_event_history',
                                                                                                ['times',
                                                                                                 'parameters'],
                                                                                                '\n\t\tcalculate for each trial, the intertrial interval preceding that trial, based on:\n\t\tthe raw last trial\n\t\tthe last reward signal in the line\n\t\treturn the fixation reward trial onsets, with their itis depending on iti, fixation reward and general reward itis.\n\t\t'),
                                                                                               ('deconvolve_interval_roi',
                                                                                                ['roi',
                                                                                                 'threshold=3.5',
                                                                                                 "mask_type='center_surround_Z'",
                                                                                                 "analysis_type='deconvolution'",
                                                                                                 "mask_direction='pos'",
                                                                                                 "signal_type='mean'",
                                                                                                 'nr_bins=4',
                                                                                                 "iti_type='all_reward'",
                                                                                                 "binning_grain='session'",
                                                                                                 'zero_time_offset=0.0',
                                                                                                 "add_other_conditions='full_design'"],
                                                                                                '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                               ('deconvolve_intervals',
                                                                                                ['threshold=3.0',
                                                                                                 "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                 "analysis_type='deconvolution'",
                                                                                                 "signal_type='mean'",
                                                                                                 "add_other_conditions='full_design'",
                                                                                                 'nr_bins=4'],
                                                                                                '')],
                                                                                   'properties': ['hdf5_filename',
                                                                                                  'which_stimulus_rewarded']},
             'Tools.Sessions.RewardSessions.SingleBBRewardSession.SingleBBRewardSession': {'bases': ['Tools.Sessions.RewardSessions.SingleBBRewardSession.SingleRewardSession'],
                                                                                           'constructor': [],
                                                                                           'docstring': '',
                                                                                           'methods': [('import_stats_from_initial_session',
                                                                                                        ['example_func_to_highres_file',
                                                                                                         'original_stat_folder',
                                                                                                         'nr_stat_files=4',
                                                                                                         "stat_file_names=['cope', 'tstat', 'pe', 'zstat']"],
                                                                                                        '\n\t\t'),
                                                                                                       ('align_feats',
                                                                                                        ["postFix=['mcf']"],
                                                                                                        'docstring for align_feats'),
                                                                                                       ('project_stats',
                                                                                                        ["which_file='zstat'",
                                                                                                         "postFix=['mcf']"],
                                                                                                        ''),
                                                                                                       ('import_deconvolution_responses_from_all_sessions',
                                                                                                        ['session_1',
                                                                                                         'session_2'],
                                                                                                        '\n\t\t'),
                                                                                                       ('mask_other_session_stats_to_hdf',
                                                                                                        ["run_type='reward'",
                                                                                                         "postFix=['mcf']"],
                                                                                                        '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                                       ('mask_stats_to_hdf',
                                                                                                        ["run_type='reward'",
                                                                                                         "postFix=['mcf']"],
                                                                                                        '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                                       ('deconvolve_roi',
                                                                                                        ['roi',
                                                                                                         'threshold=3.5',
                                                                                                         "mask_type='center_Z'",
                                                                                                         "analysis_type='deconvolution'",
                                                                                                         "mask_direction='pos'",
                                                                                                         "signal_type='mean'"],
                                                                                                        '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                                       ('deconvolve',
                                                                                                        ['threshold=3.0',
                                                                                                         "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                         "analysis_type='deconvolution'",
                                                                                                         "signal_type='mean'"],
                                                                                                        '')],
                                                                                           'properties': ['hdf5_filename']},
             'Tools.Sessions.RewardSessions.SingleRewardSession.SingleRewardSession': {'bases': ['Tools.Sessions.RewardSessions.SingleRewardSession.Session'],
                                                                                       'constructor': [],
                                                                                       'docstring': '\n\tAnalyses for visual reward sessions\n\t',
                                                                                       'methods': [('create_feat_event_files_one_run',
                                                                                                    ['run',
                                                                                                     'minimum_blink_duration=0.01'],
                                                                                                    '\n\t\tcreates feat analysis event files for reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                                   ('feat_reward_analysis',
                                                                                                    ["version=''",
                                                                                                     "postFix=['mcf']",
                                                                                                     'run_feat=True',
                                                                                                     "feat_file='reward_more_contrasts.fsf'"],
                                                                                                    '\n\t\tRuns feat analysis for all reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                                   ('project_stats',
                                                                                                    ["which_file='zstat'",
                                                                                                     "postFix=['mcf']"],
                                                                                                    ''),
                                                                                                   ('mask_stats_to_hdf',
                                                                                                    ["run_type='reward'",
                                                                                                     "postFix=['mcf']",
                                                                                                     "version='orientation'"],
                                                                                                    '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                                   ('hdf5_file',
                                                                                                    ['run_type',
                                                                                                     "mode='r'"],
                                                                                                    ''),
                                                                                                   ('pupil_responses_one_run',
                                                                                                    ['run',
                                                                                                     'frequency',
                                                                                                     'sample_rate=2000',
                                                                                                     "postFix=['mcf']",
                                                                                                     'analysis_duration=10'],
                                                                                                    ''),
                                                                                                   ('pupil_responses',
                                                                                                    ['sample_rate=2000',
                                                                                                     'save_all=False'],
                                                                                                    'docstring for pupil_responses'),
                                                                                                   ('pupil_responses_interval',
                                                                                                    ['sample_rate=2000',
                                                                                                     'save_all=False'],
                                                                                                    'docstring for pupil_responses_interval'),
                                                                                                   ('correlate_copes_from_run',
                                                                                                    ['run',
                                                                                                     "rois=['V1', 'V2', 'V3', 'V4', 'V3AB']",
                                                                                                     "copes=['visual_cope', 'reward_cope']",
                                                                                                     'plot=True'],
                                                                                                    '\n\t\tcorrelates two types of data from regions of interest with one another\n\t\t'),
                                                                                                   ('correlate_reward_copes',
                                                                                                    ["rois=['V1', 'V2d', 'V2v', 'V3d', 'V3v', 'V4', 'V3AB']",
                                                                                                     "copes=['visual_cope', 'reward_cope']",
                                                                                                     'scatter_plots=False'],
                                                                                                    '\n\t\tcorrelate reward run cope values with one another from all reward runs separately.\n\t\t'),
                                                                                                   ('deconvolve_roi',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_surround_Z'",
                                                                                                     "analysis_type='deconvolution'",
                                                                                                     "mask_direction='pos'",
                                                                                                     "signal_type='mean'"],
                                                                                                    '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                                   ('deconvolve_pupil',
                                                                                                    ['sample_rate=2000',
                                                                                                     "postFix=['mcf']",
                                                                                                     'subsampled_sample_frequency=5'],
                                                                                                    ''),
                                                                                                   ('deconvolve',
                                                                                                    ['threshold=3.0',
                                                                                                     "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                     "analysis_type='deconvolution'",
                                                                                                     "signal_type='mean'"],
                                                                                                    ''),
                                                                                                   ('whole_brain_deconvolution',
                                                                                                    ['deco=True',
                                                                                                     'average_intervals=[[3.5, 12], [2, 7]]',
                                                                                                     'to_surf=True'],
                                                                                                    '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                                   ('anova_stats_over_time',
                                                                                                    ["data_type='fmri'",
                                                                                                     'sample_rate=2000',
                                                                                                     'comparison_rate=100'],
                                                                                                    'perform per-timepoint two-way anova on time-varying signals in four conditions. '),
                                                                                                   ('run_glm_on_hdf5',
                                                                                                    ["data_type='hpf_data'",
                                                                                                     "analysis_type='per_trial'",
                                                                                                     "post_fix_for_text_file=['all_trials']",
                                                                                                     "functionalPostFix=['mcf']",
                                                                                                     "which_conditions=['reward']"],
                                                                                                    ''),
                                                                                                   ('mean_stats_for_roi',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_surround_Z'",
                                                                                                     "stats_types=['blank_silence', 'blank_sound', 'visual_silence', 'visual_sound']",
                                                                                                     "mask_direction='pos'"],
                                                                                                    'docstring for mean_stats_for_roi'),
                                                                                                   ('mean_stats',
                                                                                                    ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                     'threshold=2.3',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "stats_types=['blank_silence', 'visual_sound', 'visual_silence', 'blank_sound']",
                                                                                                     "mask_direction='pos'"],
                                                                                                    'docstring for mean_stats'),
                                                                                                   ('correlate_data_from_run',
                                                                                                    ['run',
                                                                                                     "rois=['V1', 'V2', 'V3', 'V4', 'V3AB']",
                                                                                                     "data_pairs=[[['mapper', 'center_pe'], ['reward', 'visual_cope']], [['mapper', 'center_pe'], ['reward', 'reward_cope']]]",
                                                                                                     'plot=True',
                                                                                                     'which_mapper_run=0'],
                                                                                                    '\n\t\tcorrelates two types of data from regions of interest with one another, but more generally than the other function. \n\t\tThis function allows you to specify from what file and what type of stat you are going to correlate with one another.\n\t\tSpecifically, the data_pairs argument is a list of two-item lists which specify the to be correlated stats\n\t\t'),
                                                                                                   ('correlate_data',
                                                                                                    ["rois=['V1', 'V2d', 'V2v', 'V3d', 'V3v', 'V4', 'V3AB']",
                                                                                                     "data_pairs=[[['mapper', 'center_pe'], ['reward', 'visual_cope']], [['mapper', 'center_pe'], ['reward', 'reward_cope']]]",
                                                                                                     'scatter_plots=False',
                                                                                                     'which_mapper_run=0'],
                                                                                                    '\n\t\tcorrelate reward run cope values with one another from all reward runs separately.\n\t\t'),
                                                                                                   ('histogram_data_from_roi',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_surround_Z'",
                                                                                                     "stats_types=['visual_reward_fix_reward', 'visual_silence_fix_silence']",
                                                                                                     "mask_direction='pos'"],
                                                                                                    'docstring for mean_stats'),
                                                                                                   ('histogram',
                                                                                                    ["rois=['V1', 'V2', 'V3', 'V3A', 'V4']",
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_surround_Z'",
                                                                                                     "stats_types=['visual_reward_fix_reward', 'visual_silence_fix_silence']",
                                                                                                     "mask_direction='pos'"],
                                                                                                    'docstring for mean_stats'),
                                                                                                   ('correlate_pupil_and_BOLD_for_roi_per_time',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     'time_range_BOLD=[5.0, 9.0]',
                                                                                                     'time_range_pupil=[0.0, 10.0]',
                                                                                                     'stepsize=0.25',
                                                                                                     "area=''"],
                                                                                                    'docstring for correlate_pupil_and_BOLD'),
                                                                                                   ('correlate_pupil_and_BOLD_for_roi_variance',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     'time_range_BOLD=[0.0, 10.0]',
                                                                                                     'time_range_pupil=[0.0, 10.0]',
                                                                                                     'stepsize=0.25',
                                                                                                     "area=''"],
                                                                                                    'docstring for correlate_pupil_and_BOLD'),
                                                                                                   ('calculate_BOLD_variance_for_roi',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     'time_range_BOLD=[2.0, 8.0]',
                                                                                                     'time_range_pupil=[2.0, 8.0]',
                                                                                                     'stepsize=0.25',
                                                                                                     "area=''",
                                                                                                     "data_type='psc_hpf_data'"],
                                                                                                    'docstring for correlate_pupil_and_BOLD'),
                                                                                                   ('correlate_pupil_and_BOLD',
                                                                                                    ['threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000'],
                                                                                                    ''),
                                                                                                   ('correlate_pupil_and_BOLD_variance',
                                                                                                    ['threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000'],
                                                                                                    ''),
                                                                                                   ('calculate_BOLD_variance',
                                                                                                    ['threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     "data_type='psc_hpf_data'"],
                                                                                                    ''),
                                                                                                   ('cross_correlate_pupil_and_BOLD_for_roi',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     'time_range_BOLD=[5.0, 10.0]',
                                                                                                     'time_range_pupil=[0.5, 2.0]',
                                                                                                     'stepsize=0.25',
                                                                                                     "area=''",
                                                                                                     'color=1.0'],
                                                                                                    'docstring for correlate_pupil_and_BOLD'),
                                                                                                   ('cross_correlate_pupil_and_BOLD_for_roi_over_time',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     'time_range_BOLD=[-3.0, 16.0]',
                                                                                                     'time_range_pupil=[0.0, 2.0]',
                                                                                                     'stepsize=0.25',
                                                                                                     "area=''",
                                                                                                     'color=1.0'],
                                                                                                    'docstring for correlate_pupil_and_BOLD'),
                                                                                                   ('cross_correlate_pupil_and_BOLD',
                                                                                                    ['threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     "time_range='long'"],
                                                                                                    ''),
                                                                                                   ('cross_correlate_pupil_and_BOLD_over_time',
                                                                                                    ['threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'",
                                                                                                     'sample_rate=2000',
                                                                                                     "time_range='long'"],
                                                                                                    ''),
                                                                                                   ('blinks_per_trial',
                                                                                                    ['blink_detection_range=[0, 16]',
                                                                                                     'granularity=0.01',
                                                                                                     'smoothing_kernel_width=0.5'],
                                                                                                    '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                                   ('calculate_event_history',
                                                                                                    ['times',
                                                                                                     'parameters'],
                                                                                                    '\n\t\tcalculate for each trial, the intertrial interval preceding that trial, based on:\n\t\tthe raw last trial\n\t\tthe last reward signal in the line\n\t\treturn the fixation reward trial onsets, with their itis depending on iti, fixation reward and general reward itis.\n\t\t'),
                                                                                                   ('deconvolve_interval_roi',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_surround_Z'",
                                                                                                     "analysis_type='deconvolution'",
                                                                                                     "mask_direction='pos'",
                                                                                                     "signal_type='mean'",
                                                                                                     'nr_bins=4',
                                                                                                     "iti_type='all_reward'",
                                                                                                     "binning_grain='session'",
                                                                                                     'zero_time_offset=-3.0',
                                                                                                     "add_other_conditions='full_design'"],
                                                                                                    '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                                   ('deconvolve_intervals',
                                                                                                    ['threshold=3.0',
                                                                                                     "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                     "analysis_type='deconvolution'",
                                                                                                     "signal_type='mean'",
                                                                                                     'zero_time_offset=0.0',
                                                                                                     "mask_direction='pos'",
                                                                                                     "add_other_conditions='full_design'",
                                                                                                     'nr_bins=4'],
                                                                                                    ''),
                                                                                                   ('correlate_patterns',
                                                                                                    ['template',
                                                                                                     'test'],
                                                                                                    "\n\t\tcorrelate_patterns correlates template and test patterns. \n\t\treturns a 3 array, with spearman's correlation rho, its p-value and the scaled norm of the linear projection of the test and template as defined in Ress and Heeger, 2001.\n\t\t"),
                                                                                                   ('variance_from_whole_brain_residuals',
                                                                                                    ['time_range_BOLD=[3.0, 9.0]',
                                                                                                     'var=True',
                                                                                                     'to_surf=True'],
                                                                                                    ''),
                                                                                                   ('mask_residual_variance_to_hdf',
                                                                                                    ["run_type='reward'"],
                                                                                                    '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                                   ('residual_variance_per_roi',
                                                                                                    ['roi',
                                                                                                     'threshold=3.5',
                                                                                                     "mask_type='center_Z'",
                                                                                                     "mask_direction='pos'"],
                                                                                                    ''),
                                                                                                   ('residual_variance_analysis',
                                                                                                    ['threshold=3.0',
                                                                                                     "rois=['V1', 'V2', 'V3', 'V3AB']"],
                                                                                                    ''),
                                                                                                   ('fsl_results_to_deco_folder',
                                                                                                    ["run_type='reward'",
                                                                                                     "postFix=['mcf']"],
                                                                                                    '')],
                                                                                       'properties': ['hdf5_filename']},
             'Tools.Sessions.RewardSessions.VariableRewardSession.VariableRewardSession': {'bases': ['Tools.Sessions.RewardSessions.VariableRewardSession.SingleRewardSession'],
                                                                                           'constructor': [],
                                                                                           'docstring': '',
                                                                                           'methods': [('deconvolve_roi',
                                                                                                        ['roi',
                                                                                                         'threshold=3.5',
                                                                                                         "mask_type='center_Z'",
                                                                                                         "analysis_type='deconvolution'",
                                                                                                         "mask_direction='pos'",
                                                                                                         "signal_type='reward'"],
                                                                                                        '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                                       ('deconvolve_plus_glm_roi',
                                                                                                        ['roi',
                                                                                                         'threshold=3.5',
                                                                                                         "mask_type='center_Z'",
                                                                                                         "analysis_type='deconvolution'",
                                                                                                         "mask_direction='pos'",
                                                                                                         "signal_type='GLM'"],
                                                                                                        '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                                       ('deconvolve',
                                                                                                        ['threshold=3.5',
                                                                                                         "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                         "analysis_type='deconvolution'"],
                                                                                                        ''),
                                                                                                       ('deconvolve_plus_glm',
                                                                                                        ['threshold=3.5',
                                                                                                         "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                         "analysis_type='deconvolution'"],
                                                                                                        ''),
                                                                                                       ('whole_brain_deconvolution',
                                                                                                        ['deco=True',
                                                                                                         'average_intervals=[[3.5, 12], [2, 7]]',
                                                                                                         'to_surf=True',
                                                                                                         "postFix=['mcf', 'tf', 'psc']"],
                                                                                                        '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                                       ('whole_brain_deconvolution_plus_glm',
                                                                                                        ['deco=True',
                                                                                                         'average_intervals=[[2, 7]]',
                                                                                                         'to_surf=True',
                                                                                                         "postFix=['mcf', 'tf', 'psc']"],
                                                                                                        '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                                       ('create_feat_event_files_one_run',
                                                                                                        ['run',
                                                                                                         'minimum_blink_duration=0.01'],
                                                                                                        '\n\t\tcreates feat analysis event files for reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                                       ('feat_reward_analysis',
                                                                                                        ["version=''",
                                                                                                         "postFix=['mcf']",
                                                                                                         'run_feat=False'],
                                                                                                        '\n\t\tRuns feat analysis for all reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                                       ('import_stats_from_initial_session',
                                                                                                        ['example_func_to_highres_file',
                                                                                                         'original_stat_folder',
                                                                                                         'nr_stat_files=4',
                                                                                                         "stat_file_names=['cope', 'tstat', 'pe', 'zstat']"],
                                                                                                        '\n\t\t'),
                                                                                                       ('create_glm_design_matrix_with_reward_convolution_and_nuisances_for_run',
                                                                                                        ['run',
                                                                                                         "postFix=['mcf', 'tf']",
                                                                                                         'remove=False'],
                                                                                                        '\n\t\tThis function takes a run, opens its nifti file and runs a glm on it, that incorporates standard HRF responses for visual and trial structure events,\n\t\tand negative BOLD HRF responses for reward and non-reward events.\n\t\t'),
                                                                                                       ('run_glm_from_design_matrix_nipy',
                                                                                                        ['run',
                                                                                                         "postFix=['mcf', 'tf']",
                                                                                                         'design_matrix=None',
                                                                                                         'design_matrix_file=None'],
                                                                                                        '\n\t\tTakes a designmatrix file and uses it to run a glm in nipy\n\t\t'),
                                                                                                       ('create_glm_command_from_design_matrix_fsl',
                                                                                                        ['run',
                                                                                                         "postFix=['mcf', 'tf']",
                                                                                                         'design_matrix_file=None',
                                                                                                         "basic_film_command='film_gls -sa -epith 200 -output_pwdata -v -rn %s %s %s'"],
                                                                                                        'run_glm_from_design_matrix_nipy assumes the design_matrix_file is in a folder in which to put the results'),
                                                                                                       ('glm_with_reward_convolution_and_nuisances',
                                                                                                        ["postFix=['mcf', 'tf']",
                                                                                                         'execute=True'],
                                                                                                        'docstring for fname'),
                                                                                                       ('contrast_list',
                                                                                                        [],
                                                                                                        ''),
                                                                                                       ('create_contrasts_per_run',
                                                                                                        ['run',
                                                                                                         "postFix=['mcf', 'tf']"],
                                                                                                        'calculate_contrasts_per_run takes the output from a film_gls run and uses contrast_mgr to calculate relevant contrasts'),
                                                                                                       ('calculate_contrasts_by_contrast_mgr',
                                                                                                        ["postFix=['mcf', 'tf']",
                                                                                                         'execute=True'],
                                                                                                        'docstring for calculate_contrasts'),
                                                                                                       ('calculate_contrasts_by_numpy',
                                                                                                        ["postFix=['mcf', 'tf']"],
                                                                                                        ''),
                                                                                                       ('mask_stats_to_hdf',
                                                                                                        ["run_type='reward'",
                                                                                                         "postFix=['mcf']",
                                                                                                         'secondary_addition=False'],
                                                                                                        '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                                       ('compare_glm_stats',
                                                                                                        ["areas=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                         'threshold=3.5',
                                                                                                         "mask_direction='pos'",
                                                                                                         "mask_type='center_Z'"],
                                                                                                        'docstring for compare_glm_stats'),
                                                                                                       ('run_glm_on_hdf5',
                                                                                                        ["data_type='hpf_data'",
                                                                                                         "analysis_type='from_design'",
                                                                                                         "post_fix_for_text_file=['all_trials']",
                                                                                                         "functionalPostFix=['mcf']",
                                                                                                         "which_conditions=['reward', 'mapper']",
                                                                                                         'contrast_matrix=[]'],
                                                                                                        ''),
                                                                                                       ('import_deconvolution_responses_from_all_session',
                                                                                                        ['session_1',
                                                                                                         'session_2'],
                                                                                                        '\n\t\t'),
                                                                                                       ('pattern_comparisons',
                                                                                                        [],
                                                                                                        ''),
                                                                                                       ('compare_deconvolved_responses_across_sessions_per_roi',
                                                                                                        ['roi',
                                                                                                         "template='FSL'",
                                                                                                         'threshold=3.5',
                                                                                                         "mask_type='center_Z'",
                                                                                                         "mask_direction='pos'"],
                                                                                                        'docstring for compare_deconvolved_responses_per_session_per_roi'),
                                                                                                       ('compare_deconvolved_responses_across_sessions_per_roi_per_datatype',
                                                                                                        ['roi',
                                                                                                         "template='exp1'",
                                                                                                         'comparison_list=[]',
                                                                                                         'threshold=3.5',
                                                                                                         "mask_type='center_Z'",
                                                                                                         "mask_direction='pos'"],
                                                                                                        ''),
                                                                                                       ('compare_deconvolved_responses_across_sessions',
                                                                                                        ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                         'force_run=False',
                                                                                                         'threshold=3.5',
                                                                                                         "mask_type='center_Z'",
                                                                                                         "mask_direction='pos'"],
                                                                                                        ''),
                                                                                                       ('deconvolve_with_correlation_roi',
                                                                                                        ['roi',
                                                                                                         'threshold=3.5',
                                                                                                         "mask_type='center_Z'",
                                                                                                         "mask_direction='pos'",
                                                                                                         "template='exp1'",
                                                                                                         "analysis_type='correlation'",
                                                                                                         "correlation_function='spearman'",
                                                                                                         'interval=[0.0, 9.0]',
                                                                                                         "offsets={'stim': 0.0, 'delay': -6.0, 'reward': -2.0}"],
                                                                                                        '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                                       ('deconvolve_pattern_plus_glm',
                                                                                                        ['threshold=4.5',
                                                                                                         "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                                         "analysis_type='correlation'",
                                                                                                         "correlation_function='projection'",
                                                                                                         'interval=[0.0, 9.0]',
                                                                                                         "offsets={'stim': 0.0, 'delay': -6.0, 'reward': -2.0}"],
                                                                                                        '')],
                                                                                           'properties': ['deconvolution_labels',
                                                                                                          'condition_labels',
                                                                                                          'full_design_names',
                                                                                                          'hdf5_filename',
                                                                                                          'contrast_data',
                                                                                                          'mean_response',
                                                                                                          'std_response',
                                                                                                          'normed_contrast_data',
                                                                                                          'normed_mean_response',
                                                                                                          'normed_std_response',
                                                                                                          'files_for_comparisons',
                                                                                                          'inter_experiment_correlations']},
             'Tools.Sessions.RivalrySession.RivalryLearningSession': {'bases': ['Tools.Sessions.RivalrySession.Session'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('analyzeBehavior',
                                                                                   [],
                                                                                   'docstring for analyzeBehaviorPerRun'),
                                                                                  ('gatherBehavioralData',
                                                                                   ['whichRuns',
                                                                                    "whichEvents=['perceptEventsAsArray', 'transitionEventsAsArray']",
                                                                                    'sampleInterval=[0, 0]'],
                                                                                   ''),
                                                                                  ('deconvolveEvents',
                                                                                   ['roi',
                                                                                    "eventType='perceptEventsAsArray'"],
                                                                                   'deconvolution analysis on the bold data of rivalry runs in this session for the given roi'),
                                                                                  ('deconvolveEventsFromRois',
                                                                                   ["roiArray=['V1', 'V2', 'MT', 'lingual', 'superiorparietal', 'inferiorparietal', 'insula']",
                                                                                    "eventType='perceptEventsAsArray'"],
                                                                                   ''),
                                                                                  ('eventRelatedAverageEvents',
                                                                                   ['roi',
                                                                                    "eventType='perceptEventsAsArray'",
                                                                                    'whichRuns=None',
                                                                                    "color='k'"],
                                                                                   'eventRelatedAverage analysis on the bold data of rivalry runs in this session for the given roi'),
                                                                                  ('eventRelatedAverageEventsFromRois',
                                                                                   ["roiArray=['V1', 'V2', 'MT', 'lingual', 'superiorparietal', 'inferiorparietal', 'insula']",
                                                                                    "eventType='transitionEventsAsArray'",
                                                                                    'learningPartitions=None'],
                                                                                   ''),
                                                                                  ('prepareTransitionGLM',
                                                                                   ['functionals=False'],
                                                                                   '\n\t\tTake all transition events and use them as event regressors\n\t\tMake one big nii file that contains all the motion corrected and zscored rivalry data\n\t\tRun FSL on this\n\t\t'),
                                                                                  ('eventRelatedDecodingFromRoi',
                                                                                   ['roi',
                                                                                    "eventType='perceptEventsAsArray'",
                                                                                    'whichRuns=None',
                                                                                    "color='k'"],
                                                                                   ''),
                                                                                  ('convertRetinoMask',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['disparityPsychophysics',
                                                                                     'rivalryBehavior']},
             'Tools.Sessions.RivalrySession.RivalryReplaySession': {'bases': ['Tools.Sessions.RivalrySession.Session'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('analyzeBehavior',
                                                                                 [],
                                                                                 'docstring for analyzeBehaviorPerRun'),
                                                                                ('gatherBehavioralData',
                                                                                 ['whichRuns',
                                                                                  "whichEvents=['perceptEventsAsArray', 'transitionEventsAsArray']",
                                                                                  'sampleInterval=[0, 0]'],
                                                                                 ''),
                                                                                ('deconvolveEvents',
                                                                                 ['roi'],
                                                                                 'deconvolution analysis on the bold data of rivalry runs in this session for the given roi'),
                                                                                ('deconvolveEventsFromRois',
                                                                                 ["roiArray=['V1', 'V2', 'MT', 'lingual', 'superiorparietal', 'inferiorparietal', 'insula']",
                                                                                  "eventType='perceptEventsAsArray'"],
                                                                                 ''),
                                                                                ('eventRelatedAverageEvents',
                                                                                 ['roi',
                                                                                  "eventType='perceptEventsAsArray'",
                                                                                  'whichRuns=None',
                                                                                  "whichMask='_transStateGTdomState'",
                                                                                  "color='k'",
                                                                                  "signal='mean'"],
                                                                                 'eventRelatedAverage analysis on the bold data of rivalry runs in this session for the given roi'),
                                                                                ('eventRelatedAverageEventsFromRois',
                                                                                 ["roiArray=['V1', 'V2', 'MT', 'lingual', 'superiorparietal', 'inferiorparietal', 'insula']",
                                                                                  "whichMask='_transStateGTdomState'",
                                                                                  "signal='mean'"],
                                                                                 ''),
                                                                                ('runTransitionGLM',
                                                                                 ['perRun=False',
                                                                                  'acrossRuns=True'],
                                                                                 '\n\t\tTake all transition events and use them as event regressors\n\t\tRun FSL on this\n\t\t'),
                                                                                ('coherenceAnalysis',
                                                                                 ["roiArray=[['pericalcarine', 'lateraloccipital', 'lingual'], ['inferiorparietal', 'superiorparietal', 'cuneus', 'precuneus'], ['supramarginal'], ['superiortemporal', 'parsorbitalis', 'parstriangularis', 'parsopercularis', 'caudalmiddlefrontal', 'precentral'], ['superiorfrontal'], ['rostralmiddlefrontal']]",
                                                                                  "labels=['occ', 'par', 'tpj', 'inffr', 'fef', 'dlpfc']",
                                                                                  'acrossAreas=False',
                                                                                  'acrossConditions=True'],
                                                                                 '')],
                                                                    'properties': ['rivalryBehavior',
                                                                                   'labels',
                                                                                   'coherences',
                                                                                   'delays',
                                                                                   'Cs',
                                                                                   'plotData']},
             'Tools.Sessions.RivalrySession.SphereSession': {'bases': ['Tools.Sessions.RivalrySession.Session'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('analyzeBehavior',
                                                                          [],
                                                                          'docstring for analyzeBehaviorPerRun'),
                                                                         ('registerfeats',
                                                                          ["run_type='sphere_presto'",
                                                                           "postFix=['mcf']"],
                                                                          'run featregapply for all feat direcories in this session.'),
                                                                         ('mask_stats_to_hdf',
                                                                          ["run_type='sphere_presto'",
                                                                           "postFix=['mcf']"],
                                                                          '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                         ('hdf5_file',
                                                                          ["run_type='sphere_presto'"],
                                                                          ''),
                                                                         ('roi_data_from_hdf',
                                                                          ['h5file',
                                                                           'run',
                                                                           'roi_wildcard',
                                                                           'data_type',
                                                                           "postFix=['mcf']"],
                                                                          '\n\t\tdrags data from an already opened hdf file into a numpy array, concatenating the data_type data across voxels in the different rois that correspond to the roi_wildcard\n\t\t'),
                                                                         ('deconvolve_roi',
                                                                          ['roi',
                                                                           'thresholds=[[2.3, 30.3], [-30.3, -2.3]]',
                                                                           "mask_type='stim_on_Z'",
                                                                           's=None'],
                                                                          '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                         ('deconvolve',
                                                                          ['threshold=3.0',
                                                                           "rois=['V1', 'V2', 'V3', 'V3AB', 'V4', 'LO12']",
                                                                           "analysis_type='deconvolution'"],
                                                                          ''),
                                                                         ('gatherBehavioralData',
                                                                          ['sampleInterval=[0, 0]'],
                                                                          ''),
                                                                         ('setupFeatEventFiles',
                                                                          ['buffer_time=16'],
                                                                          'creates event text files for transition events and stim on period'),
                                                                         ('runTransitionFeats',
                                                                          [],
                                                                          ''),
                                                                         ('correlate_data_from_run',
                                                                          ['run',
                                                                           "rois=['V1', 'V2', 'V3', 'V4', 'V3A']",
                                                                           "data_pairs=[['on_off_cope', 'trans_cope'], ['eccen_phase', 'trans_cope'], ['eccen_phase', 'on_off_cope']]",
                                                                           'plot=True',
                                                                           "postFix=''"],
                                                                          '\n\t\tcorrelates two types of data from regions of interest with one another, but more generally than the other function. \n\t\tThis function allows you to specify from what file and what type of stat you are going to correlate with one another.\n\t\tSpecifically, the data_pairs argument is a list of two-item lists which specify the to be correlated stats\n\t\t'),
                                                                         ('correlate_data',
                                                                          ["rois=['V1', 'V2', 'V3', 'V4', 'V3A']",
                                                                           "data_pairs=[['stim_on_Z', 'alternation_Z'], ['eccen_phase', 'alternation_Z'], ['eccen_phase', 'stim_on_Z']]",
                                                                           'scatter_plots=True'],
                                                                          '\n\t\tcorrelate reward run cope values with one another from all reward runs separately.\n\t\t'),
                                                                         ('take_retinotopic_data_from_run',
                                                                          ['run',
                                                                           "rois=['V1', 'V2', 'V3', 'V4', 'V3A']",
                                                                           "values=['alternation_Z']",
                                                                           "nr_bins={'eccen': 3, 'polar': 4}",
                                                                           "offsets={'eccen': 0.0, 'polar': 0.0}"],
                                                                          ''),
                                                                         ('take_retinotopic_data',
                                                                          ["rois=['V1', 'V2', 'V3', 'V4', 'V3A']",
                                                                           "values=['alternation_cope']",
                                                                           "nr_bins={'eccen': 4, 'polar': 4}"],
                                                                          ''),
                                                                         ('new_state_decoding_roi',
                                                                          ['roi',
                                                                           "data_type='psc_hpf_data'",
                                                                           'thresholds=[2.3, 30.3]',
                                                                           "mask_type='stim_on_Z'"],
                                                                          ''),
                                                                         ('stateDecodingFromRoi',
                                                                          ['roi',
                                                                           "color='k'",
                                                                           'sampleInterval=25',
                                                                           'run_width=1'],
                                                                          ''),
                                                                         ('decodeEvents',
                                                                          ['run_width'],
                                                                          ''),
                                                                         ('timeForDecodingResults',
                                                                          ['run_width=1'],
                                                                          ''),
                                                                         ('mapDecodingRoi',
                                                                          ['roiData',
                                                                           'intervalForFit=[25, 325]',
                                                                           'intervalForTest=[25, 325]',
                                                                           "output_type='project'",
                                                                           'hemodynamic_lag_for_percepts=4.0'],
                                                                          ''),
                                                                         ('mapDecoding',
                                                                          ["areas=['V1', ['V2v', 'V2d'], ['V3v', 'V3d'], 'V3A', ['inferiorparietal', 'superiorparietal']]",
                                                                           "masks=['_visual', '_neg-visual']"],
                                                                          ''),
                                                                         ('eccenMapDecoding',
                                                                          ["areas=[['V1', 'V2v', 'V2d', 'V3v', 'V3d'], ['V3A', 'V3B', 'V7?', 'MT'], ['V4', 'LO1', 'LO2', 'fusiform', 'parahippocampal', 'inferiortemporal'], ['superiorparietal', 'inferiorparietal', 'supramarginal', 'precuneus']]"],
                                                                          ''),
                                                                         ('eccenMapDecodingFromRoi',
                                                                          ['eccenFile',
                                                                           'statFile',
                                                                           'allFuncData',
                                                                           's=None',
                                                                           "area=['V1']",
                                                                           'nrBins=15',
                                                                           "binningType='nrVoxels'"],
                                                                          ''),
                                                                         ('eccenMapDecodingCorr',
                                                                          ["areas=['V1', ['V2v', 'V2d'], ['V3v', 'V3d'], ['V3A', 'V3B', 'V7?'], ['superiorparietal', 'inferiorparietal', 'supramarginal', 'precuneus']]"],
                                                                          'docstring for eccenMapDecodingCorr')],
                                                             'properties': ['behOps',
                                                                            'hdf5_filename',
                                                                            'rtime',
                                                                            'timepointsPerRun',
                                                                            'runDuration',
                                                                            'allTransitions',
                                                                            'allPercepts',
                                                                            'allStimOnsets',
                                                                            'whichSamplesAllRuns']},
             'Tools.Sessions.RivalrySession7T.RivalrySession7T': {'bases': ['Tools.Sessions.RivalrySession7T.RivalryReplaySession'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('createFolderHierarchy',
                                                                               [],
                                                                               'docstring for fname'),
                                                                              ('registerfeats',
                                                                               ["run_type='sphere_presto'",
                                                                                "postFix=['mcf']"],
                                                                               'run featregapply for all feat direcories in this session.'),
                                                                              ('gfeat_analysis',
                                                                               ['run_separate=True',
                                                                                'run_combination=True'],
                                                                               ''),
                                                                              ('mask_stats_to_hdf',
                                                                               ["run_type='rivalry'",
                                                                                "postFix=['mcf']",
                                                                                'polar_eccen=False'],
                                                                               '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results.\n\t\t- PER RUN: feat data, residuals, hpf_data, tf_data, and tf_psc_date.\n\t\t- COMBINED OVER RUNS: gfeat data, (polar and eccen data if polar_eccen==True)\n\t\t\teccen data has to be in .../processed/mri/masks/eccen/eccen.nii.gz\n\t\t\tpolar data has to be in .../processed/mri/masks/polar/polar.nii.gz\n\t\t'),
                                                                              ('roi_data_from_hdf',
                                                                               ['h5file',
                                                                                'run',
                                                                                'roi_wildcard',
                                                                                'data_type',
                                                                                "postFix=['mcf']"],
                                                                               '\n\t\tdrags data from an already opened hdf file into a numpy array, concatenating the data_type data across voxels in the different rois that correspond to the roi_wildcard\n\t\t'),
                                                                              ('roi_data_from_hdf_runsCombined',
                                                                               ['h5file',
                                                                                'this_run_group_name',
                                                                                'roi_wildcard',
                                                                                'data_type'],
                                                                               '\n\t\tdrags data from an already opened hdf file into a numpy array, concatenating the data_type data across voxels in the different rois that correspond to the roi_wildcard\n\t\t'),
                                                                              ('setup_all_data_for_decoding',
                                                                               ['runArray',
                                                                                'decoding',
                                                                                'roi',
                                                                                "input_data='tf_psc_data'",
                                                                                "run_type='rivalry'",
                                                                                "postFix=['mcf']",
                                                                                "mask_type='STIM_Z'",
                                                                                "mask_direction='pos'",
                                                                                'threshold=None',
                                                                                'number_voxels=None',
                                                                                'split_by_relative_time=None',
                                                                                'polar_eccen=False'],
                                                                               ''),
                                                                              ('createRegressors',
                                                                               ['inputObject',
                                                                                'len_run',
                                                                                'subSamplingRatio'],
                                                                               ''),
                                                                              ('createRegressors1',
                                                                               ['runArray'],
                                                                               "\n\t\tCreate behaviour files for first session. In this sessions timestamps we're based on TRs.\n\t\t"),
                                                                              ('createRegressors2',
                                                                               ['runArray',
                                                                                'buttons'],
                                                                               '\n\t\tCreate behaviour files for rest of sessions. Timestamps are based on frames.\n\t\t'),
                                                                              ('createRegressorsBlinks',
                                                                               ['runArray'],
                                                                               ''),
                                                                              ('runAllGLMS',
                                                                               [],
                                                                               '\n\t\tTake all transition events and use them as event regressors\n\t\tRun FSL on this\n\t\t'),
                                                                              ('create_decoding_indices_BR',
                                                                               ['runArray',
                                                                                'trans_weight',
                                                                                "run_type='rivalry'",
                                                                                "postFix=['mcf']",
                                                                                'subSamplingRatio=100.0'],
                                                                               ''),
                                                                              ('create_decoding_indices_SFM',
                                                                               ['runArray',
                                                                                'trans_weight',
                                                                                "run_type='rivalry'",
                                                                                "postFix=['mcf']",
                                                                                'subSamplingRatio=100.0'],
                                                                               ''),
                                                                              ('decoding_plain',
                                                                               ['runArray',
                                                                                'decoding',
                                                                                'roi',
                                                                                "input_data='tf_psc_data'",
                                                                                "mask_type='STIM_Z'",
                                                                                "mask_direction='pos'",
                                                                                'threshold=None',
                                                                                'number_voxels=None',
                                                                                'split_by_relative_time=None',
                                                                                'polar_eccen=False'],
                                                                               ''),
                                                                              ('decoding_loop_over_rois',
                                                                               ['runArray',
                                                                                'decoding',
                                                                                'roi',
                                                                                "input_data='tf_psc_data'"],
                                                                               ''),
                                                                              ('decoding_loop_over_rois_time',
                                                                               ['runArray',
                                                                                'decoding',
                                                                                'roi',
                                                                                "input_data='tf_psc_data'"],
                                                                               ''),
                                                                              ('decoding_loop_over_rois_stimcontrast',
                                                                               ['runArray',
                                                                                'decoding',
                                                                                'roi',
                                                                                'number_voxels',
                                                                                "input_data='tf_psc_data'"],
                                                                               ''),
                                                                              ('decoding_complex',
                                                                               ['runArray',
                                                                                'decoding',
                                                                                'roi',
                                                                                "input_data='tf_psc_data'",
                                                                                "mask_type='STIM_Z'",
                                                                                "mask_direction='pos'",
                                                                                'threshold=None',
                                                                                'number_voxels=None',
                                                                                'split_by_relative_time=None',
                                                                                'polar_eccen=False',
                                                                                'width_sliding_window=100',
                                                                                'lag=0'],
                                                                               ''),
                                                                              ('old', [], ''),
                                                                              ('old_decoding',
                                                                               ['runArray',
                                                                                "run_type='rivalry'",
                                                                                'subSamplingRatio=100.0',
                                                                                "postFix=['mcf']",
                                                                                "mask_type='STIM_Z'",
                                                                                "mask_direction='pos'",
                                                                                'threshold=4',
                                                                                'number_voxels=200'],
                                                                               '')],
                                                                  'properties': ['processedFolders',
                                                                                 'hdf5_filename',
                                                                                 'X_BR',
                                                                                 'X_SFM',
                                                                                 'y_BR',
                                                                                 'y_SFM',
                                                                                 'mask_data_mean',
                                                                                 'eccen_data_c',
                                                                                 'polar_data_c',
                                                                                 'relative_times_BR',
                                                                                 'relative_times_SFM',
                                                                                 'X',
                                                                                 'y',
                                                                                 'subSamplingRatio']},
             'Tools.Sessions.Session.PathConstructor': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '\n\tFilePathConstructor is an abstract superclass for sessions.\n\tIt constructs the file and folder naming hierarchy for a given session.\n\tAll file naming and calling runs through this class.\n\t',
                                                        'methods': [('baseFolder',
                                                                     [],
                                                                     'docstring for baseFolder'),
                                                                    ('makeBaseFolder', [], ''),
                                                                    ('stageFolder',
                                                                     ['stage'],
                                                                     "folder for a certain stage - such as 'raw/mri' or 'processed/eyelink', or something like that. "),
                                                                    ('runFolder',
                                                                     ['stage', 'run'],
                                                                     'docstring for runFolder'),
                                                                    ('conditionFolder',
                                                                     ['stage', 'run'],
                                                                     'docstring for runFolder'),
                                                                    ('runFile',
                                                                     ['stage',
                                                                      'run=None',
                                                                      'postFix=[]',
                                                                      'extension=standardMRIExtension',
                                                                      'base=None'],
                                                                     "\n\t\trunFile, returns runFileName in file hierarchy. usage:\n\t\traw mri file X = self.runFile('raw/mri', postFix = [str(self.runList[X])], base = self.subject.initials)\n\t\tmotion corrected file X = self.runFile('processed/mri', run = self.runList[X], postFix = ['mcf'])\n\t\t"),
                                                                    ('createFolderHierarchy',
                                                                     [],
                                                                     'docstring for fname')],
                                                        'properties': ['fileNameBaseString',
                                                                       'processedFolders']},
             'Tools.Sessions.Session.Session': {'bases': ['Tools.Sessions.Session.PathConstructor'],
                                                'constructor': ['ID',
                                                                'date',
                                                                'project',
                                                                'subject',
                                                                'parallelize=False',
                                                                'loggingLevel=logging.DEBUG'],
                                                'docstring': '\n\tSession is an object that contains all the analysis steps \n\tfor analyzing an entire session. The basic class contains the base level analyis and preparations, \n\tsuch as putting the files in place and setting up the runs. \n\tOften-used analysis steps include registration with an anatomical, and motion correction of the functionals.\n\t',
                                                'methods': [('addRun',
                                                             ['run'],
                                                             "addRun adds a run to a session's run list"),
                                                            ('parcelateConditions', [], ''),
                                                            ('setupFiles',
                                                             ['rawBase'],
                                                             '\n\t\tWhen all runs are listed in the session, \n\t\tthe session will be able to distill what conditions are there \n\t\tand setup the folder hierarchy and copy the raw image files into position\n\t\t'),
                                                            ('registerSession',
                                                             ["contrast='t2'",
                                                              'FSsubject=None',
                                                              'prepare_register=True',
                                                              'which_epi_target=0',
                                                              'deskull=True',
                                                              'bb=True',
                                                              'makeMasks=False',
                                                              "maskList=['cortex', 'V1', 'V2', 'V3', 'V3A', 'V3B', 'V4']",
                                                              "labelFolder='label'",
                                                              'MNI=True',
                                                              'run_flirt=True'],
                                                             "\n\t\tbefore we run motion correction we register with the freesurfer segmented version of this subject's brain. \n\t\tFor this we use either the inplane anatomical (if present), or we take the first epi_bold of the session,\n\t\tmotion correct it and mean the motion corrected first epi_bold to serve as the target for the registration.\n\t\tthe contrast argument indicates the contrast of the reference image in epi_bold space that is to be registered.\n\t\tThen we may choose to run flirt on the epi-bold (recommended against) or run flirt on the fs segmented brain file in the\n\t\tsubject's fs folder, which we recommend. \n\t\t"),
                                                            ('setupRegistrationForFeat',
                                                             ['feat_directory',
                                                              'wait_for_execute=True'],
                                                             'apply the freesurfer/flirt registration for this session to a feat directory. This ensures that the feat results can be combined across runs and subjects without running flirt all the time.'),
                                                            ('motionCorrectFunctionals',
                                                             ['registerNoMC=False'],
                                                             '\n\t\tmotionCorrectFunctionals corrects all functionals in a given session.\n\t\thow we do this depends on whether we have parallel processing turned on or not\n\t\t'),
                                                            ('rescaleFunctionals',
                                                             ["operations=['bandpass', 'zscore']",
                                                              "filterFreqs={'highpass': 30.0, 'lowpass': -1.0}",
                                                              "funcPostFix=['mcf']"],
                                                             '\n\t\trescaleFunctionals operates on motion corrected functionals\n\t\tand does high/low pass filtering, percent signal change or zscoring of the data\n\t\t'),
                                                            ('createMasksFromFreeSurferLabels',
                                                             ['labelFolders=[]',
                                                              'annot=True',
                                                              "annotFile='aparc.a2005s'",
                                                              'template_condition=None'],
                                                             "createMasksFromFreeSurferLabels looks in the subject's freesurfer subject folder and reads label files out of the subject's label folder of preference. (empty string if none given).\n\t\tAnnotations in the freesurfer directory will also be used to generate roi files in the functional volume. The annotFile argument dictates the file to be used for this. \n\t\t"),
                                                            ('masksWithStatMask',
                                                             ["originalMaskFolder='anat'",
                                                              'statMasks=None',
                                                              'statMaskNr=0',
                                                              'absolute=False',
                                                              'toSurf=False',
                                                              'thresholds=[2.0]',
                                                              "maskFunction='__gt__'",
                                                              'delete_older_files=False'],
                                                             ''),
                                                            ('maskFunctionalData',
                                                             ['maskThreshold=0.0',
                                                              "postFixFunctional=['mcf']",
                                                              'timeSlices=[0, -1]',
                                                              'delete_older_files=True'],
                                                             '\n\t\tmaskFunctionalData will mask each bold file with the masks present in the masks folder.\n\t\t'),
                                                            ('gatherRIOData',
                                                             ['roi',
                                                              'whichRuns',
                                                              "whichMask='_thresh_z_stat'",
                                                              'timeSlices=[0, -1]'],
                                                             ''),
                                                            ('importStatMask',
                                                             ['statMaskFile',
                                                              'registrationEPIFile',
                                                              'reregisterSession=True',
                                                              'force_operations=False',
                                                              'use_subject_anat=True',
                                                              "reg_method='bbregister'",
                                                              'force_final=True'],
                                                             '\n\t\tstatmask is to be converted to anatomical space for this subject, \n\t\tafter that from anatomical to present session epi format.\n\t\t'),
                                                            ('takePhaseSurfacesToFuncSpace',
                                                             ["folder=''",
                                                              "fn='eccen'",
                                                              'template_condition=None'],
                                                             ''),
                                                            ('run_data_from_hdf',
                                                             ['h5file',
                                                              'run',
                                                              'data_type',
                                                              "postFix=['mcf']"],
                                                             'docstring for parameter_data_from_hdf'),
                                                            ('roi_data_from_hdf',
                                                             ['h5file',
                                                              'run',
                                                              'roi_wildcard',
                                                              'data_type',
                                                              "postFix=['mcf']"],
                                                             '\n\t\tdrags data from an already opened hdf file into a numpy array, concatenating the data_type data across voxels in the different rois that correspond to the roi_wildcard\n\t\t'),
                                                            ('run_glm_on_hdf5',
                                                             ['run_list=None',
                                                              'hdf5_file=None',
                                                              "data_type='hpf_data'",
                                                              "analysis_type='per_trial'",
                                                              "post_fix_for_text_file=['all_trials']",
                                                              "functionalPostFix=['mcf']",
                                                              'design=None',
                                                              'contrast_matrix=[]'],
                                                             "\n\t\trun_glm_on_hdf5 takes an open (r+) hdf5 file, a list of run objects and runs glms on all roi subregions from a run.\n\t\tit assumes:\n\t\t\t1. an hdf5 file that has groups for each of the _mcf.nii.gz files in the runlist\n\t\t\t2. that each of these groups has a sequence of roi data arrays\n\t\t\t3. a nii.gz file that can be found with the session's runFile function\n\t\t\t4. a fsl-event text file in the run folders from which to take the separate-trial regressors.\n\t\t")],
                                                'properties': ['ID',
                                                               'date',
                                                               'project',
                                                               'subject',
                                                               'runList',
                                                               'dateCode',
                                                               'parallelize',
                                                               'loggingLevel',
                                                               'logger',
                                                               'conditionList',
                                                               'scanTypeList',
                                                               'scanTypeDict',
                                                               'conditions',
                                                               'conditionDict',
                                                               'FSsubject',
                                                               'referenceFunctionalFileName',
                                                               'originalReferenceFunctionalVolume']},
             'Tools.Sessions.VisualRewardSession.VisualRewardDualSession': {'bases': ['Tools.Sessions.VisualRewardSession.VisualRewardSession'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [('mask_stats_to_hdf',
                                                                                         ["run_type='reward'",
                                                                                          "postFix=['mcf']",
                                                                                          "version='orientation'"],
                                                                                         '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                        ('deconvolve_roi',
                                                                                         ['roi',
                                                                                          'threshold=2.5',
                                                                                          "mask_type='left_Z'",
                                                                                          "analysis_type='deconvolution'",
                                                                                          "mask_direction='pos'"],
                                                                                         '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                        ('deconvolve',
                                                                                         ['threshold=2.5',
                                                                                          "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                          "analysis_type='deconvolution'"],
                                                                                         ''),
                                                                                        ('whole_brain_deconvolution',
                                                                                         ['deco=True',
                                                                                          'average_intervals=[[3.5, 12], [2, 7]]',
                                                                                          'to_surf=True',
                                                                                          "postFix=['mcf', 'tf', 'psc']"],
                                                                                         '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                        ('project_stats',
                                                                                         ["which_file='zstat'",
                                                                                          "postFix=['mcf', 'tf']"],
                                                                                         ''),
                                                                                        ('rewarded_stimulus_run',
                                                                                         ['run',
                                                                                          "postFix=['mcf', 'tf']"],
                                                                                         ''),
                                                                                        ('correlate_patterns_over_time_for_roi',
                                                                                         ['roi',
                                                                                          "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                          "data_type_mask='Z'",
                                                                                          'mask_threshold=3.5',
                                                                                          "mask_direction='pos'",
                                                                                          "postFix=['mcf', 'tf']"],
                                                                                         ''),
                                                                                        ('correlate_patterns_over_time',
                                                                                         ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                          "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                          "data_type_mask='Z'",
                                                                                          'mask_threshold=2.3',
                                                                                          "mask_direction='pos'",
                                                                                          "postFix=['mcf', 'tf']"],
                                                                                         ''),
                                                                                        ('decode_patterns_per_trial',
                                                                                         ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                          "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                          "data_type_mask='Z'",
                                                                                          'mask_threshold=3.5',
                                                                                          "mask_direction='pos'",
                                                                                          "postFix=['mcf', 'tf']"],
                                                                                         ''),
                                                                                        ('decode_patterns_per_trial_for_roi',
                                                                                         ['roi',
                                                                                          "classification_data_type='per_trial_hpf_data_zscore'",
                                                                                          "data_type_mask='Z'",
                                                                                          'mask_threshold=3.5',
                                                                                          "mask_direction='pos'",
                                                                                          "postFix=['mcf', 'tf']"],
                                                                                         ''),
                                                                                        ('import_stats_from_initial_session',
                                                                                         ['example_func_to_highres_file',
                                                                                          'original_stat_folder',
                                                                                          'nr_stat_files=4',
                                                                                          "stat_file_names=['cope', 'tstat', 'pe', 'zstat']"],
                                                                                         '\n\t\t')],
                                                                            'properties': ['hdf5_filename',
                                                                                           'which_stimulus_rewarded']},
             'Tools.Sessions.VisualRewardSession.VisualRewardSession': {'bases': ['Tools.Sessions.VisualRewardSession.Session'],
                                                                        'constructor': [],
                                                                        'docstring': '\n\tAnalyses for visual reward sessions\n\t',
                                                                        'methods': [('create_feat_event_files_one_run',
                                                                                     ['run',
                                                                                      'minimum_blink_duration=0.01'],
                                                                                     '\n\t\tcreates feat analysis event files for reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                    ('feat_reward_analysis',
                                                                                     ["version=''",
                                                                                      "postFix=['mcf']",
                                                                                      'run_feat=True'],
                                                                                     '\n\t\tRuns feat analysis for all reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                    ('project_stats',
                                                                                     ["which_file='zstat'",
                                                                                      "postFix=['mcf']"],
                                                                                     ''),
                                                                                    ('mask_stats_to_hdf',
                                                                                     ["run_type='reward'",
                                                                                      "postFix=['mcf']",
                                                                                      "version='orientation'"],
                                                                                     '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                    ('hdf5_file',
                                                                                     ['run_type',
                                                                                      "mode='r'"],
                                                                                     ''),
                                                                                    ('pupil_responses_one_run',
                                                                                     ['run',
                                                                                      'frequency',
                                                                                      'sample_rate=2000',
                                                                                      "postFix=['mcf']",
                                                                                      'analysis_duration=10'],
                                                                                     ''),
                                                                                    ('pupil_responses',
                                                                                     ['sample_rate=2000',
                                                                                      'save_all=False'],
                                                                                     'docstring for pupil_responses'),
                                                                                    ('correlate_copes_from_run',
                                                                                     ['run',
                                                                                      "rois=['V1', 'V2', 'V3', 'V4', 'V3AB']",
                                                                                      "copes=['visual_cope', 'reward_cope']",
                                                                                      'plot=True'],
                                                                                     '\n\t\tcorrelates two types of data from regions of interest with one another\n\t\t'),
                                                                                    ('correlate_reward_copes',
                                                                                     ["rois=['V1', 'V2d', 'V2v', 'V3d', 'V3v', 'V4', 'V3AB']",
                                                                                      "copes=['visual_cope', 'reward_cope']",
                                                                                      'scatter_plots=False'],
                                                                                     '\n\t\tcorrelate reward run cope values with one another from all reward runs separately.\n\t\t'),
                                                                                    ('deconvolve_roi',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_surround_Z'",
                                                                                      "analysis_type='deconvolution'",
                                                                                      "mask_direction='pos'",
                                                                                      "signal_type='mean'"],
                                                                                     '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                    ('deconvolve_pupil',
                                                                                     ['sample_rate=2000',
                                                                                      "postFix=['mcf']",
                                                                                      'subsampled_sample_frequency=5'],
                                                                                     ''),
                                                                                    ('deconvolve',
                                                                                     ['threshold=3.0',
                                                                                      "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                      "analysis_type='deconvolution'",
                                                                                      "signal_type='mean'"],
                                                                                     ''),
                                                                                    ('whole_brain_deconvolution',
                                                                                     ['deco=True',
                                                                                      'average_intervals=[[3.5, 12], [2, 7]]',
                                                                                      'to_surf=True'],
                                                                                     '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                    ('anova_stats_over_time',
                                                                                     ["data_type='fmri'",
                                                                                      'sample_rate=2000',
                                                                                      'comparison_rate=100'],
                                                                                     'perform per-timepoint two-way anova on time-varying signals in four conditions. '),
                                                                                    ('run_glm_on_hdf5',
                                                                                     ["data_type='hpf_data'",
                                                                                      "analysis_type='per_trial'",
                                                                                      "post_fix_for_text_file=['all_trials']",
                                                                                      "functionalPostFix=['mcf']",
                                                                                      "which_conditions=['reward', 'mapper']"],
                                                                                     ''),
                                                                                    ('mean_stats_for_roi',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_surround_Z'",
                                                                                      "stats_types=['blank_silence', 'blank_sound', 'visual_silence', 'visual_sound']",
                                                                                      "mask_direction='pos'"],
                                                                                     'docstring for mean_stats_for_roi'),
                                                                                    ('mean_stats',
                                                                                     ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                      'threshold=2.3',
                                                                                      "mask_type='center_Z'",
                                                                                      "stats_types=['blank_silence', 'visual_sound', 'visual_silence', 'blank_sound']",
                                                                                      "mask_direction='pos'"],
                                                                                     'docstring for mean_stats'),
                                                                                    ('correlate_data_from_run',
                                                                                     ['run',
                                                                                      "rois=['V1', 'V2', 'V3', 'V4', 'V3AB']",
                                                                                      "data_pairs=[[['mapper', 'center_pe'], ['reward', 'visual_cope']], [['mapper', 'center_pe'], ['reward', 'reward_cope']]]",
                                                                                      'plot=True',
                                                                                      'which_mapper_run=0'],
                                                                                     '\n\t\tcorrelates two types of data from regions of interest with one another, but more generally than the other function. \n\t\tThis function allows you to specify from what file and what type of stat you are going to correlate with one another.\n\t\tSpecifically, the data_pairs argument is a list of two-item lists which specify the to be correlated stats\n\t\t'),
                                                                                    ('correlate_data',
                                                                                     ["rois=['V1', 'V2d', 'V2v', 'V3d', 'V3v', 'V4', 'V3AB']",
                                                                                      "data_pairs=[[['mapper', 'center_pe'], ['reward', 'visual_cope']], [['mapper', 'center_pe'], ['reward', 'reward_cope']]]",
                                                                                      'scatter_plots=False',
                                                                                      'which_mapper_run=0'],
                                                                                     '\n\t\tcorrelate reward run cope values with one another from all reward runs separately.\n\t\t'),
                                                                                    ('histogram_data_from_roi',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_surround_Z'",
                                                                                      "stats_types=['visual_reward_fix_reward', 'visual_silence_fix_silence']",
                                                                                      "mask_direction='pos'"],
                                                                                     'docstring for mean_stats'),
                                                                                    ('histogram',
                                                                                     ["rois=['V1', 'V2', 'V3', 'V3A', 'V4']",
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_surround_Z'",
                                                                                      "stats_types=['visual_reward_fix_reward', 'visual_silence_fix_silence']",
                                                                                      "mask_direction='pos'"],
                                                                                     'docstring for mean_stats'),
                                                                                    ('correlate_pupil_and_BOLD_for_roi_per_time',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000',
                                                                                      'time_range_BOLD=[5.0, 9.0]',
                                                                                      'time_range_pupil=[0.0, 10.0]',
                                                                                      'stepsize=0.25',
                                                                                      "area=''"],
                                                                                     'docstring for correlate_pupil_and_BOLD'),
                                                                                    ('correlate_pupil_and_BOLD_for_roi_variance',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000',
                                                                                      'time_range_BOLD=[0.0, 10.0]',
                                                                                      'time_range_pupil=[0.0, 10.0]',
                                                                                      'stepsize=0.25',
                                                                                      "area=''"],
                                                                                     'docstring for correlate_pupil_and_BOLD'),
                                                                                    ('calculate_BOLD_variance_for_roi',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000',
                                                                                      'time_range_BOLD=[2.0, 8.0]',
                                                                                      'time_range_pupil=[2.0, 8.0]',
                                                                                      'stepsize=0.25',
                                                                                      "area=''"],
                                                                                     'docstring for correlate_pupil_and_BOLD'),
                                                                                    ('correlate_pupil_and_BOLD',
                                                                                     ['threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000'],
                                                                                     ''),
                                                                                    ('correlate_pupil_and_BOLD_variance',
                                                                                     ['threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000'],
                                                                                     ''),
                                                                                    ('calculate_BOLD_variance',
                                                                                     ['threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000'],
                                                                                     ''),
                                                                                    ('cross_correlate_pupil_and_BOLD_for_roi',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000',
                                                                                      'time_range_BOLD=[5.0, 10.0]',
                                                                                      'time_range_pupil=[0.5, 2.0]',
                                                                                      'stepsize=0.25',
                                                                                      "area=''",
                                                                                      'color=1.0'],
                                                                                     'docstring for correlate_pupil_and_BOLD'),
                                                                                    ('cross_correlate_pupil_and_BOLD_for_roi_over_time',
                                                                                     ['roi',
                                                                                      'threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000',
                                                                                      'time_range_BOLD=[-3.0, 16.0]',
                                                                                      'time_range_pupil=[0.0, 2.0]',
                                                                                      'stepsize=0.25',
                                                                                      "area=''",
                                                                                      'color=1.0'],
                                                                                     'docstring for correlate_pupil_and_BOLD'),
                                                                                    ('cross_correlate_pupil_and_BOLD',
                                                                                     ['threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000',
                                                                                      "time_range='long'"],
                                                                                     ''),
                                                                                    ('cross_correlate_pupil_and_BOLD_over_time',
                                                                                     ['threshold=3.5',
                                                                                      "mask_type='center_Z'",
                                                                                      "mask_direction='pos'",
                                                                                      'sample_rate=2000',
                                                                                      "time_range='long'"],
                                                                                     ''),
                                                                                    ('blinks_per_trial',
                                                                                     ['blink_detection_range=[0, 16]',
                                                                                      'granularity=0.01',
                                                                                      'smoothing_kernel_width=0.5'],
                                                                                     '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t')],
                                                                        'properties': ['hdf5_filename']},
             'Tools.Sessions.VisualRewardSession.VisualRewardVar2Session': {'bases': ['Tools.Sessions.VisualRewardSession.VisualRewardVarSession'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [('deconvolve_roi',
                                                                                         ['roi',
                                                                                          'threshold=3.5',
                                                                                          "mask_type='center_Z'",
                                                                                          "analysis_type='deconvolution'",
                                                                                          "mask_direction='pos'",
                                                                                          "signal_type='reward'"],
                                                                                         '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                        ('deconvolve_plus_glm_roi',
                                                                                         ['roi',
                                                                                          'threshold=3.5',
                                                                                          "mask_type='center_Z'",
                                                                                          "analysis_type='deconvolution'",
                                                                                          "mask_direction='pos'",
                                                                                          "signal_type='GLM'"],
                                                                                         '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                        ('deconvolve',
                                                                                         ['threshold=3.5',
                                                                                          "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                          "analysis_type='deconvolution'"],
                                                                                         ''),
                                                                                        ('deconvolve_plus_glm',
                                                                                         ['threshold=3.5',
                                                                                          "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                          "analysis_type='deconvolution'"],
                                                                                         ''),
                                                                                        ('whole_brain_deconvolution',
                                                                                         ['deco=True',
                                                                                          'average_intervals=[[3.5, 12], [2, 7]]',
                                                                                          'to_surf=True',
                                                                                          "postFix=['mcf', 'tf', 'psc']"],
                                                                                         '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                        ('whole_brain_deconvolution_plus_glm',
                                                                                         ['deco=True',
                                                                                          'average_intervals=[[2, 7]]',
                                                                                          'to_surf=True',
                                                                                          "postFix=['mcf', 'tf', 'psc']"],
                                                                                         '\n\t\twhole_brain_deconvolution takes all nii files from the reward condition and deconvolves the separate event types\n\t\t'),
                                                                                        ('create_feat_event_files_one_run',
                                                                                         ['run',
                                                                                          'minimum_blink_duration=0.01'],
                                                                                         '\n\t\tcreates feat analysis event files for reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                        ('feat_reward_analysis',
                                                                                         ["version=''",
                                                                                          "postFix=['mcf']",
                                                                                          'run_feat=False'],
                                                                                         '\n\t\tRuns feat analysis for all reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                        ('import_stats_from_initial_session',
                                                                                         ['example_func_to_highres_file',
                                                                                          'original_stat_folder',
                                                                                          'nr_stat_files=4',
                                                                                          "stat_file_names=['cope', 'tstat', 'pe', 'zstat']"],
                                                                                         '\n\t\t'),
                                                                                        ('create_glm_design_matrix_with_reward_convolution_and_nuisances_for_run',
                                                                                         ['run',
                                                                                          "postFix=['mcf', 'tf']",
                                                                                          'remove=False'],
                                                                                         '\n\t\tThis function takes a run, opens its nifti file and runs a glm on it, that incorporates standard HRF responses for visual and trial structure events,\n\t\tand negative BOLD HRF responses for reward and non-reward events.\n\t\t'),
                                                                                        ('run_glm_from_design_matrix_nipy',
                                                                                         ['run',
                                                                                          "postFix=['mcf', 'tf']",
                                                                                          'design_matrix=None',
                                                                                          'design_matrix_file=None'],
                                                                                         '\n\t\tTakes a designmatrix file and uses it to run a glm in nipy\n\t\t'),
                                                                                        ('create_glm_command_from_design_matrix_fsl',
                                                                                         ['run',
                                                                                          "postFix=['mcf', 'tf']",
                                                                                          'design_matrix_file=None',
                                                                                          "basic_film_command='film_gls -sa -epith 200 -output_pwdata -v -rn %s %s %s'"],
                                                                                         'run_glm_from_design_matrix_nipy assumes the design_matrix_file is in a folder in which to put the results'),
                                                                                        ('glm_with_reward_convolution_and_nuisances',
                                                                                         ["postFix=['mcf', 'tf']",
                                                                                          'execute=True'],
                                                                                         'docstring for fname'),
                                                                                        ('contrast_list',
                                                                                         [],
                                                                                         ''),
                                                                                        ('create_contrasts_per_run',
                                                                                         ['run',
                                                                                          "postFix=['mcf', 'tf']"],
                                                                                         'calculate_contrasts_per_run takes the output from a film_gls run and uses contrast_mgr to calculate relevant contrasts'),
                                                                                        ('calculate_contrasts_by_contrast_mgr',
                                                                                         ["postFix=['mcf', 'tf']",
                                                                                          'execute=True'],
                                                                                         'docstring for calculate_contrasts'),
                                                                                        ('calculate_contrasts_by_numpy',
                                                                                         ["postFix=['mcf', 'tf']"],
                                                                                         ''),
                                                                                        ('mask_stats_to_hdf',
                                                                                         ["run_type='reward'",
                                                                                          "postFix=['mcf']",
                                                                                          'secondary_addition=False'],
                                                                                         '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                        ('compare_glm_stats',
                                                                                         ["areas=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                          'threshold=3.5',
                                                                                          "mask_direction='pos'",
                                                                                          "mask_type='center_Z'"],
                                                                                         'docstring for compare_glm_stats'),
                                                                                        ('run_glm_on_hdf5',
                                                                                         ["data_type='hpf_data'",
                                                                                          "analysis_type='from_design'",
                                                                                          "post_fix_for_text_file=['all_trials']",
                                                                                          "functionalPostFix=['mcf']",
                                                                                          "which_conditions=['reward', 'mapper']",
                                                                                          'contrast_matrix=[]'],
                                                                                         ''),
                                                                                        ('import_deconvolution_responses_from_all_session',
                                                                                         ['session_1',
                                                                                          'session_2'],
                                                                                         '\n\t\t'),
                                                                                        ('compare_deconvolved_responses_across_sessions_per_roi',
                                                                                         ['roi'],
                                                                                         'docstring for compare_deconvolved_responses_per_session_per_roi'),
                                                                                        ('compare_deconvolved_responses_across_sessions_per_roi_per_datatype',
                                                                                         ['roi',
                                                                                          "comparisons=['exp1', '']"],
                                                                                         ''),
                                                                                        ('compare_deconvolved_responses_across_sessions',
                                                                                         ["rois=['V1', 'V2', 'V3', 'V3AB', 'V4']"],
                                                                                         '')],
                                                                            'properties': ['deconvolution_labels',
                                                                                           'condition_labels',
                                                                                           'full_design_names',
                                                                                           'hdf5_filename',
                                                                                           'contrast_data',
                                                                                           'mean_response',
                                                                                           'std_response',
                                                                                           'normed_contrast_data',
                                                                                           'normed_mean_response',
                                                                                           'normed_std_response',
                                                                                           'files_for_comparisons']},
             'Tools.Sessions.VisualRewardSession.VisualRewardVarSession': {'bases': ['Tools.Sessions.VisualRewardSession.VisualRewardSession'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('mask_stats_to_hdf',
                                                                                        ["run_type='reward'",
                                                                                         "postFix=['mcf']"],
                                                                                        '\n\t\tCreate an hdf5 file to populate with the stats and parameter estimates of the feat results\n\t\t'),
                                                                                       ('deconvolve_roi',
                                                                                        ['roi',
                                                                                         'threshold=3.5',
                                                                                         "mask_type='center_Z'",
                                                                                         "analysis_type='deconvolution'",
                                                                                         "mask_direction='pos'",
                                                                                         "signal_type='reward'"],
                                                                                        '\n\t\trun deconvolution analysis on the input (mcf_psc_hpf) data that is stored in the reward hdf5 file. \n\t\tEvent data will be extracted from the .txt fsl event files used for the initial glm.\n\t\troi argument specifies the region from which to take the data.\n\t\t'),
                                                                                       ('deconvolve',
                                                                                        ['threshold=2.5',
                                                                                         "rois=['V1', 'V2', 'V3', 'V3AB', 'V4']",
                                                                                         "analysis_type='deconvolution'"],
                                                                                        ''),
                                                                                       ('create_feat_event_files_one_run',
                                                                                        ['run',
                                                                                         'minimum_blink_duration=0.01'],
                                                                                        '\n\t\tcreates feat analysis event files for reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t'),
                                                                                       ('feat_reward_analysis',
                                                                                        ["version=''",
                                                                                         "postFix=['mcf']",
                                                                                         'run_feat=False'],
                                                                                        '\n\t\tRuns feat analysis for all reward runs. \n\t\tTakes run and minimum blink duration in seconds as arguments\n\t\t')],
                                                                           'properties': ['hdf5_filename',
                                                                                          'condition_labels',
                                                                                          'deconvolution_labels']},
             'Tools.Subjects.Subject.Subject': {'bases': ['object'],
                                                'constructor': ['initials',
                                                                'firstName',
                                                                'birthdate',
                                                                'standardFSID',
                                                                'labelFolderOfPreference'],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['initials',
                                                               'firstName',
                                                               'birthdate',
                                                               'standardFSID',
                                                               'labelFolderOfPreference']},
             'Tools.Trial.Trial': {'bases': ['object'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'Tools.other_scripts.ols.ols': {'bases': [],
                                             'constructor': ['y',
                                                             'x',
                                                             "y_varnm='y'",
                                                             "x_varnm=''"],
                                             'docstring': "\n    Author: Vincent Nijs (+ ?)\n\n    Email: v-nijs at kellogg.northwestern.edu\n\n    Last Modified: Mon Jan 15 17:56:17 CST 2007\n    \n    Dependencies: See import statement at the top of this file\n\n    Doc: Class for multi-variate regression using OLS\n\n    For usage examples of other class methods see the class tests at the bottom of this file. To see the class in action\n    simply run this file using 'python ols.py'. This will generate some simulated data and run various analyses. If you have rpy installed\n    the same model will also be estimated by R for confirmation.\n\n    Input:\n        y = dependent variable\n        y_varnm = string with the variable label for y\n        x = independent variables, note that a constant is added by default\n        x_varnm = string or list of variable labels for the independent variables\n    \n    Output:\n        There are no values returned by the class. Summary provides printed output.\n        All other measures can be accessed as follows:\n\n        Step 1: Create an OLS instance by passing data to the class\n\n            m = ols(y,x,y_varnm = 'y',x_varnm = ['x1','x2','x3','x4'])\n\n        Step 2: Get specific metrics\n\n            To print the coefficients: \n                >>> print m.b\n            To print the coefficients p-values: \n                >>> print m.p\n    \n    ",
                                             'methods': [('estimate', [], ''),
                                                         ('dw',
                                                          [],
                                                          '\n        Calculates the Durbin-Waston statistic\n        '),
                                                         ('omni',
                                                          [],
                                                          '\n        Omnibus test for normality\n        '),
                                                         ('JB',
                                                          [],
                                                          '\n        Calculate residual skewness, kurtosis, and do the JB test for normality\n        '),
                                                         ('ll',
                                                          [],
                                                          '\n        Calculate model log-likelihood and two information criteria\n        '),
                                                         ('summary',
                                                          [],
                                                          '\n        Printing model output to screen\n        ')],
                                             'properties': ['y',
                                                            'x',
                                                            'y_varnm',
                                                            'x_varnm',
                                                            'inv_xx',
                                                            'b',
                                                            'nobs',
                                                            'ncoef',
                                                            'df_e',
                                                            'df_r',
                                                            'e',
                                                            'sse',
                                                            'se',
                                                            't',
                                                            'p',
                                                            'R2',
                                                            'R2adj',
                                                            'F',
                                                            'Fpv']}},
 'CONSTANTS': ['Tools.log.logFormat',
               'Tools.log.logging_handlers',
               'Tools.log.logging_levels',
               'Tools.Operators.BehaviorOperator.standardNrVolumes',
               'Tools.Operators.BehaviorOperator.standardTR',
               'Tools.Operators.BehaviorOperator.standardNrSecsBeforeCountingForSelfReqAvgs',
               'Tools.Operators.BehaviorOperator.standardPeriodDuration',
               'Tools.Operators.BehaviorOperator.standardPermittedResponseLag',
               'Tools.Operators.Operator.standardMRIExtension',
               'Tools.other_scripts.convert_flac_files.cds',
               'Tools.other_scripts.convert_flac_files.v',
               'Tools.other_scripts.convert_flac_files.v',
               'Tools.other_scripts.convert_flac_files.c',
               'Tools.other_scripts.join_labels.areas',
               'Tools.other_scripts.join_labels.directory',
               'Tools.other_scripts.join_labels.FSsubjects',
               'Tools.other_scripts.join_labels.sj',
               'Tools.other_scripts.join_labels.i',
               'Tools.other_scripts.join_labels.area',
               'Tools.other_scripts.join_labels.hemi',
               'Tools.other_scripts.join_labels.cmd',
               'Tools.other_scripts.ols.data',
               'Tools.other_scripts.ols.m',
               'Tools.other_scripts.ols.have_rpy',
               'Tools.other_scripts.ols.have_rpy',
               'Tools.other_scripts.ols.y',
               'Tools.other_scripts.ols.x1',
               'Tools.other_scripts.ols.x2',
               'Tools.other_scripts.ols.x3',
               'Tools.other_scripts.ols.x4',
               'Tools.other_scripts.ols.linear_model',
               'Tools.other_scripts.ols.summary',
               'Tools.Sessions.PupilSession.thisFolder',
               'Tools.Sessions.PupilSession.analysisFolder',
               'Tools.Subjects.DB.initials',
               'Tools.Subjects.DB.firstName',
               'Tools.Subjects.DB.standardFSID',
               'Tools.Subjects.DB.birthdate',
               'Tools.Subjects.DB.labelFolderOfPreference',
               'Tools.Subjects.DB.presentSubject',
               'Tools.Subjects.JB.initials',
               'Tools.Subjects.JB.firstName',
               'Tools.Subjects.JB.standardFSID',
               'Tools.Subjects.JB.birthdate',
               'Tools.Subjects.JB.labelFolderOfPreference',
               'Tools.Subjects.JB.presentSubject',
               'Tools.Subjects.JB_2.initials',
               'Tools.Subjects.JB_2.firstName',
               'Tools.Subjects.JB_2.standardFSID',
               'Tools.Subjects.JB_2.birthdate',
               'Tools.Subjects.JB_2.labelFolderOfPreference',
               'Tools.Subjects.JB_2.presentSubject',
               'Tools.Subjects.MB.initials',
               'Tools.Subjects.MB.firstName',
               'Tools.Subjects.MB.standardFSID',
               'Tools.Subjects.MB.birthdate',
               'Tools.Subjects.MB.labelFolderOfPreference',
               'Tools.Subjects.MB.presentSubject',
               'Tools.Subjects.TK.initials',
               'Tools.Subjects.TK.firstName',
               'Tools.Subjects.TK.standardFSID',
               'Tools.Subjects.TK.birthdate',
               'Tools.Subjects.TK.labelFolderOfPreference',
               'Tools.Subjects.TK.presentSubject'],
 'FUNCTIONS': [('Tools.circularTools.positivePhases', ['phases'], ''),
               ('Tools.circularTools.circularDifference', ['phase1', 'phase2'], ''),
               ('Tools.circularTools.SCR', ['phases'], ''),
               ('Tools.circularTools.circularMean', ['phases'], ''),
               ('Tools.circularTools.circularVariance', ['phases'], ''),
               ('Tools.circularTools.circularStandardDeviation', ['phases'], ''),
               ('Tools.circularTools.standardDeviationOnPhaseDifferences',
                ['sigma1', 'sigma2'],
                ''),
               ('Tools.circularTools.circularCorrelation',
                ['phase1', 'phase2'],
                "\n\tphaseCorrelation calculates the circular correlation coefficient \n\taccording to Fisher and Lee '83\n\tequation taken from http://cnx.org/content/m22974/1.3/\n\t"),
               ('Tools.circularTools.circularStandardDeviationFromNoiseSD',
                ['real', 'imag', 'noiseSD'],
                '\n\t# so, for each of these phaseArrays, we calculate not only the phase, but also,\n\t# following Gudbjartsson and Patz, 1995, eq. 8\n\t# the standard deviation on the phase, which is equal to \n\t# the standard deviation of the noise divided by the amplitude of the signal, \n\t# and is gaussian distributed.\n\t'),
               ('Tools.circularTools.fitVonMises', ['data', 'initial=[0, pi]'], ''),
               ('Tools.circularTools.fitVonMisesZeroMean', ['data', 'initial=[0.5]'], ''),
               ('Tools.circularTools.bootstrapVonMisesFits',
                ['data', 'nrDraws=100', 'nrRepetitions=1000'],
                ''),
               ('Tools.circularTools.cart2Circ', ['x', 'y'], ''),
               ('Tools.circularTools.rotateCartesianPoints',
                ['points', 'angle', 'indegrees=False'],
                '\n\trotates points (an X by 2 np.array) by angle as defined in radians.\n\tif angle is defined in degrees, indegrees = True will correct.\n\t'),
               ('Tools.functions_jw.IRF_canonical',
                ['t=0', 's=1.0/10**26', 'n=10.1', 'tmax=930'],
                ''),
               ('Tools.functions_jw.createRegressors',
                ['inputObject', 'len_run', 'pupil_IRF', "type_convolve='stick'"],
                ''),
               ('Tools.functions_jw.movingaverage', ['interval', 'window_size'], ''),
               ('Tools.functions_jw.permutationTest', ['group1', 'group2', 'nrand=1000'], ''),
               ('Tools.functions_jw.roc_analysis',
                ['group1', 'group2', 'nrand=1000', 'tail=1'],
                ''),
               ('Tools.functions_jw.sdt_barplot',
                ['subject',
                 'hit',
                 'fa',
                 'miss',
                 'cr',
                 'p1',
                 'p2',
                 'type_plot=1',
                 'values=False'],
                ''),
               ('Tools.functions_jw.confidence_barplot',
                ['subject', 'hit', 'fa', 'miss', 'cr', 'p1', 'p2', 'p3', 'values=False'],
                ''),
               ('Tools.functions_jw.plot_permutations_and_ROC',
                ['perm_results', 'observed_mean_difference', 'significance', 'out_i', 'out_p'],
                ''),
               ('Tools.functions_jw.plot_feed_conf',
                ['subject',
                 'feedback_locked_array_joined',
                 'omission_indices_joined',
                 'hit_indices_joined',
                 'fa_indices_joined',
                 'cr_indices_joined',
                 'miss_indices_joined',
                 'confidence_0',
                 'confidence_1',
                 'confidence_2',
                 'confidence_3'],
                ''),
               ('Tools.functions_jw.plot_correlation',
                ['subject', 'bpd', 'ppd'],
                ' plot correlation bpd - ppd'),
               ('Tools.functions_jw.plot_PPDs1',
                ['subject', 'hit', 'fa', 'miss', 'cr', 'p1', 'p2', 'values=False'],
                ''),
               ('Tools.functions_jw.plot_PPDs2',
                ['subject', 'hit', 'fa', 'miss', 'cr', 'p1', 'p2', 'values=False'],
                ''),
               ('Tools.functions_jw.plot_d_prime', ['d_prime_means', 'd_prime_sems'], ''),
               ('Tools.functions_jw.plot_criterion', ['criterion_means', 'criterion_sems'], ''),
               ('Tools.functions_jw.plot_PPDs_feed',
                ['subject',
                 'ppd_feed',
                 'hit',
                 'fa',
                 'miss',
                 'cr',
                 'confidence_0',
                 'confidence_1',
                 'confidence_2',
                 'confidence_3'],
                ''),
               ('Tools.functions_jw.plot_PPDs_feed2',
                ['subject',
                 'ppd_feed',
                 'hit',
                 'cr',
                 'confidence_0',
                 'confidence_1',
                 'confidence_2',
                 'confidence_3',
                 'p1',
                 'p2',
                 'p3',
                 'p4'],
                ''),
               ('Tools.functions_jw.plot_PPDs_feed3',
                ['subject',
                 'ppd_feed',
                 'hit',
                 'cr',
                 'confidence_0',
                 'confidence_1',
                 'confidence_2',
                 'confidence_3',
                 'p1',
                 'p2'],
                ''),
               ('Tools.functions_jw.plot_confidence',
                ['confidence_ratings_joined',
                 'hit_indices_joined',
                 'fa_indices_joined',
                 'bpd_low_indices_joined',
                 'bpd_high_indices_joined',
                 'ppd_low_indices_joined',
                 'ppd_high_indices_joined'],
                ''),
               ('Tools.functions_jw.SDT_measures_per_subject',
                ['subject',
                 'target_indices_joined',
                 'no_target_indices_joined',
                 'hit_indices_joined',
                 'fa_indices_joined'],
                'calculate d_primes'),
               ('Tools.functions_jw.SDT_measures_per_subject_per_run',
                ['subject', 'target_indices', 'no_target_indices', 'hit_indices', 'fa_indices'],
                'calculate d_primes'),
               ('Tools.functions_jw.GLM_betas_barplot',
                ['subject',
                 'beta1',
                 'beta2',
                 'beta3',
                 'beta4',
                 'p1',
                 'p2',
                 'p3',
                 'p4',
                 'p5',
                 'p6'],
                ''),
               ('Tools.functions_jw.plot_resp_confidence',
                ['subject',
                 'response_locked_array_joined',
                 'x',
                 'xx',
                 'confidence_0',
                 'confidence_1',
                 'confidence_2',
                 'confidence_3',
                 'decision_time_joined'],
                ' plot stimulus locked and response locked mean pupil time series'),
               ('Tools.log.addLoggingHandler', ['handler', 'loggingLevel=logging.DEBUG'], ''),
               ('Tools.log.loggingLevelSetup', [], ''),
               ('Tools.plotting_tools.simpleaxis', ['ax'], ''),
               ('Tools.plotting_tools.spine_shift', ['ax', 'shift=10'], ''),
               ('Tools.Operators.BehaviorOperator.removeRepetitions',
                ['array', 'position=0'],
                ''),
               ('Tools.Operators.CommandLineOperator.ExecCommandLine', ['cmdline'], ''),
               ('Tools.Operators.EyeOperator.derivative_normal_pdf', ['mu', 'sigma', 'x'], ''),
               ('Tools.Operators.ImageOperator.doubleGamma',
                ['x', 'a1=6', 'a2=12', 'b1=0.9', 'b2=0.9', 'c=0.35'],
                ''),
               ('Tools.Operators.ImageOperator.double_gamma',
                ['x', 'a1', 'sh1', 'sc1', 'a2', 'sh2', 'sc2'],
                ''),
               ('Tools.Operators.ImageOperator.singleGamma', ['timepoints', 'a=6', 'b=0.9'], ''),
               ('Tools.Sessions.EyeLinkSession.normal_pdf_gain_offset',
                ['x', 'mu', 'sigma', 'offset', 'gain'],
                '')],
 'HIERARCHY': ['Tools',
               'Tools.Analysis',
               'Tools.circularTools',
               'Tools.functions_jw',
               'Tools.log',
               'Tools.plotting_tools',
               'Tools.Project',
               'Tools.Run',
               'Tools.Trial',
               'Tools.Operators',
               'Tools.Operators.ArrayOperator',
               'Tools.Operators.BehaviorOperator',
               'Tools.Operators.CommandLineOperator',
               'Tools.Operators.EyeOperator',
               'Tools.Operators.ImageOperator',
               'Tools.Operators.Operator',
               'Tools.other_scripts',
               'Tools.other_scripts.convert_flac_files',
               'Tools.other_scripts.ipython',
               'Tools.other_scripts.join_labels',
               'Tools.other_scripts.ols',
               'Tools.Sessions',
               'Tools.Sessions.EyeLinkSession',
               'Tools.Sessions.LatencyRemappingSession',
               'Tools.Sessions.OrientationDecisionSession',
               'Tools.Sessions.PupilSession',
               'Tools.Sessions.RetinotopicMappingSession',
               'Tools.Sessions.RetinotopicRemappingSession',
               'Tools.Sessions.RivalrySession',
               'Tools.Sessions.RivalrySession7T',
               'Tools.Sessions.Session',
               'Tools.Sessions.VisualRewardSession',
               'Tools.Sessions.RewardSessions',
               'Tools.Sessions.RewardSessions.DualRewardSession',
               'Tools.Sessions.RewardSessions.SingleBBRewardSession',
               'Tools.Sessions.RewardSessions.SingleRewardSession',
               'Tools.Sessions.RewardSessions.VariableRewardSession',
               'Tools.Subjects',
               'Tools.Subjects.DB',
               'Tools.Subjects.JB',
               'Tools.Subjects.JB_2',
               'Tools.Subjects.MB',
               'Tools.Subjects.Subject',
               'Tools.Subjects.TK'],
 'POINTERS': {'Tools.Analysis.*': 'subprocess.*',
              'Tools.Analysis.np': 'numpy',
              'Tools.Analysis.os': 'os',
              'Tools.Analysis.pl': 'matplotlib.pylab',
              'Tools.Analysis.sp': 'scipy',
              'Tools.Analysis.sys': 'sys',
              'Tools.Operators.ArrayOperator.*': 'math.*',
              'Tools.Operators.ArrayOperator.shell': 'IPython.embed',
              'Tools.Operators.ArrayOperator.stats': 'scipy.stats',
              'Tools.Operators.BehaviorOperator.*': 'log.*',
              'Tools.Operators.BehaviorOperator.logging': 'logging',
              'Tools.Operators.BehaviorOperator.np': 'numpy',
              'Tools.Operators.BehaviorOperator.os': 'os',
              'Tools.Operators.BehaviorOperator.pickle': 'pickle',
              'Tools.Operators.BehaviorOperator.pl': 'matplotlib.pylab',
              'Tools.Operators.BehaviorOperator.sp': 'scipy',
              'Tools.Operators.BehaviorOperator.subprocess': 'subprocess',
              'Tools.Operators.BehaviorOperator.sys': 'sys',
              'Tools.Operators.BehaviorOperator.tempfile': 'tempfile',
              'Tools.Operators.CommandLineOperator.*': 'log.*',
              'Tools.Operators.CommandLineOperator.logging': 'logging',
              'Tools.Operators.CommandLineOperator.np': 'numpy',
              'Tools.Operators.CommandLineOperator.os': 'os',
              'Tools.Operators.CommandLineOperator.pl': 'matplotlib.pylab',
              'Tools.Operators.CommandLineOperator.re': 're',
              'Tools.Operators.CommandLineOperator.sp': 'scipy',
              'Tools.Operators.CommandLineOperator.subprocess': 'subprocess',
              'Tools.Operators.CommandLineOperator.sys': 'sys',
              'Tools.Operators.CommandLineOperator.tempfile': 'tempfile',
              'Tools.Operators.EyeOperator.*': 'tables.*',
              'Tools.Operators.EyeOperator.EDF2ASCOperator': 'Tools.Operators.CommandLineOperator.EDF2ASCOperator',
              'Tools.Operators.EyeOperator.NewBehaviorOperator': 'Tools.Operators.BehaviorOperator.NewBehaviorOperator',
              'Tools.Operators.EyeOperator.logging': 'logging',
              'Tools.Operators.EyeOperator.np': 'numpy',
              'Tools.Operators.EyeOperator.os': 'os',
              'Tools.Operators.EyeOperator.pickle': 'pickle',
              'Tools.Operators.EyeOperator.pl': 'matplotlib.pylab',
              'Tools.Operators.EyeOperator.re': 're',
              'Tools.Operators.EyeOperator.scipy.fftpack': 'scipy.fftpack',
              'Tools.Operators.EyeOperator.shell': 'IPython.embed',
              'Tools.Operators.EyeOperator.sp': 'scipy',
              'Tools.Operators.EyeOperator.subprocess': 'subprocess',
              'Tools.Operators.EyeOperator.sys': 'sys',
              'Tools.Operators.EyeOperator.tempfile': 'tempfile',
              'Tools.Operators.ImageOperator.*': 'Tools.Operators.Operator.*',
              'Tools.Operators.ImageOperator.logging': 'logging',
              'Tools.Operators.ImageOperator.nipy.labs.glm': 'nipy.labs.glm',
              'Tools.Operators.ImageOperator.np': 'numpy',
              'Tools.Operators.ImageOperator.os': 'os',
              'Tools.Operators.ImageOperator.pickle': 'pickle',
              'Tools.Operators.ImageOperator.pl': 'matplotlib.pylab',
              'Tools.Operators.ImageOperator.scipy.fftpack': 'scipy.fftpack',
              'Tools.Operators.ImageOperator.sp': 'scipy',
              'Tools.Operators.ImageOperator.subprocess': 'subprocess',
              'Tools.Operators.ImageOperator.sys': 'sys',
              'Tools.Operators.ImageOperator.tempfile': 'tempfile',
              'Tools.Operators.Operator.*': 'log.*',
              'Tools.Operators.Operator.logging': 'logging',
              'Tools.Operators.Operator.np': 'numpy',
              'Tools.Operators.Operator.os': 'os',
              'Tools.Operators.Operator.pl': 'matplotlib.pylab',
              'Tools.Operators.Operator.sp': 'scipy',
              'Tools.Operators.Operator.subprocess': 'subprocess',
              'Tools.Operators.Operator.sys': 'sys',
              'Tools.Operators.Operator.tempfile': 'tempfile',
              'Tools.Project.*': 'itertools.*',
              'Tools.Project.np': 'numpy',
              'Tools.Project.os': 'os',
              'Tools.Project.pl': 'matplotlib.pylab',
              'Tools.Project.sp': 'scipy',
              'Tools.Project.subprocess': 'subprocess',
              'Tools.Project.sys': 'sys',
              'Tools.Run.*': 'Tools.Operators.BehaviorOperator.*',
              'Tools.Run.datetime': 'datetime',
              'Tools.Run.os': 'os',
              'Tools.Run.sys': 'sys',
              'Tools.Sessions.*': 'Tools.Sessions.RewardSessions.*',
              'Tools.Sessions.EyeLinkSession.*': 'circularTools.*',
              'Tools.Sessions.EyeLinkSession.PdfPages': 'matplotlib.backends.backend_pdf.PdfPages',
              'Tools.Sessions.EyeLinkSession.curve_fit': 'scipy.optimize.curve_fit',
              'Tools.Sessions.EyeLinkSession.logging': 'logging',
              'Tools.Sessions.EyeLinkSession.logging.config': 'logging.config',
              'Tools.Sessions.EyeLinkSession.logging.handlers': 'logging.handlers',
              'Tools.Sessions.EyeLinkSession.math': 'math',
              'Tools.Sessions.EyeLinkSession.np': 'numpy',
              'Tools.Sessions.EyeLinkSession.os': 'os',
              'Tools.Sessions.EyeLinkSession.pickle': 'pickle',
              'Tools.Sessions.EyeLinkSession.pl': 'matplotlib.pylab',
              'Tools.Sessions.EyeLinkSession.polyfit': 'scipy.polyfit',
              'Tools.Sessions.EyeLinkSession.polyval': 'scipy.polyval',
              'Tools.Sessions.EyeLinkSession.pp': 'pp',
              'Tools.Sessions.EyeLinkSession.rfn': 'numpy.lib.recfunctions',
              'Tools.Sessions.EyeLinkSession.shell': 'IPython.embed',
              'Tools.Sessions.EyeLinkSession.sp': 'scipy',
              'Tools.Sessions.EyeLinkSession.stats': 'scipy.stats',
              'Tools.Sessions.EyeLinkSession.sys': 'sys',
              'Tools.Sessions.LatencyRemappingSession.*': 'matplotlib.mlab.*',
              'Tools.Sessions.LatencyRemappingSession.cm': 'matplotlib.cm',
              'Tools.Sessions.LatencyRemappingSession.rfn': 'numpy.lib.recfunctions',
              'Tools.Sessions.OrientationDecisionSession.*': 'tables.*',
              'Tools.Sessions.OrientationDecisionSession.SVR': 'sklearn.svm.SVR',
              'Tools.Sessions.OrientationDecisionSession.datetime': 'datetime',
              'Tools.Sessions.OrientationDecisionSession.pickle': 'pickle',
              'Tools.Sessions.OrientationDecisionSession.shell': 'IPython.embed',
              'Tools.Sessions.OrientationDecisionSession.spearmanr': 'scipy.stats.spearmanr',
              'Tools.Sessions.PupilSession.*': 'pypsignifit.*',
              'Tools.Sessions.PupilSession.EyelinkOperator': 'Tools.Operators.EyeOperator.EyelinkOperator',
              'Tools.Sessions.PupilSession.MultipleLocator': 'matplotlib.ticker.MultipleLocator',
              'Tools.Sessions.PupilSession.PdfPages': 'matplotlib.backends.backend_pdf.PdfPages',
              'Tools.Sessions.PupilSession.Project': 'Tools.Project',
              'Tools.Sessions.PupilSession.bottleneck': 'bottleneck',
              'Tools.Sessions.PupilSession.butter': 'scipy.signal.butter',
              'Tools.Sessions.PupilSession.datetime': 'datetime',
              'Tools.Sessions.PupilSession.filtfilt': 'scipy.signal.filtfilt',
              'Tools.Sessions.PupilSession.functions_jw': 'Tools.functions_jw',
              'Tools.Sessions.PupilSession.interpolate': 'scipy.interpolate',
              'Tools.Sessions.PupilSession.logging': 'logging',
              'Tools.Sessions.PupilSession.np': 'numpy',
              'Tools.Sessions.PupilSession.os': 'os',
              'Tools.Sessions.PupilSession.pd': 'pandas',
              'Tools.Sessions.PupilSession.pl': 'matplotlib.pylab',
              'Tools.Sessions.PupilSession.plt': 'matplotlib.pyplot',
              'Tools.Sessions.PupilSession.rlc': 'rpy2.rlike.container',
              'Tools.Sessions.PupilSession.robjects': 'rpy2.robjects',
              'Tools.Sessions.PupilSession.shell': 'IPython.embed',
              'Tools.Sessions.PupilSession.signal': 'scipy.signal',
              'Tools.Sessions.PupilSession.sm': 'statsmodels.api',
              'Tools.Sessions.PupilSession.sp': 'scipy',
              'Tools.Sessions.PupilSession.stats': 'scipy.stats',
              'Tools.Sessions.PupilSession.subprocess': 'subprocess',
              'Tools.Sessions.PupilSession.sys': 'sys',
              'Tools.Sessions.RetinotopicMappingSession.*': 'Tools.Sessions.Session.*',
              'Tools.Sessions.RetinotopicRemappingSession.*': 'pylab.*',
              'Tools.Sessions.RetinotopicRemappingSession.DecodingOperator': 'Operators.ArrayOperator.DecodingOperator',
              'Tools.Sessions.RetinotopicRemappingSession.cm': 'matplotlib.cm',
              'Tools.Sessions.RetinotopicRemappingSession.combinations': 'itertools.combinations',
              'Tools.Sessions.RetinotopicRemappingSession.convolve2d': 'scipy.signal.convolve2d',
              'Tools.Sessions.RetinotopicRemappingSession.loadmat': 'scipy.io.loadmat',
              'Tools.Sessions.RetinotopicRemappingSession.pd': 'pandas',
              'Tools.Sessions.RetinotopicRemappingSession.pickle': 'pickle',
              'Tools.Sessions.RetinotopicRemappingSession.resample': 'scipy.signal.resample',
              'Tools.Sessions.RetinotopicRemappingSession.vonmises': 'scipy.stats.vonmises',
              'Tools.Sessions.RewardSessions.*': 'Tools.Sessions.RewardSessions.VariableRewardSession.*',
              'Tools.Sessions.RewardSessions.DualRewardSession.*': 'Tools.Sessions.RewardSessions.SingleRewardSession.*',
              'Tools.Sessions.RewardSessions.DualRewardSession.PdfPages': 'matplotlib.backends.backend_pdf.PdfPages',
              'Tools.Sessions.RewardSessions.DualRewardSession.butter': 'scipy.signal.butter',
              'Tools.Sessions.RewardSessions.DualRewardSession.correlate': 'scipy.signal.correlate',
              'Tools.Sessions.RewardSessions.DualRewardSession.datasets': 'sklearn.datasets',
              'Tools.Sessions.RewardSessions.DualRewardSession.datetime': 'datetime',
              'Tools.Sessions.RewardSessions.DualRewardSession.filtfilt': 'scipy.signal.filtfilt',
              'Tools.Sessions.RewardSessions.DualRewardSession.interpolate': 'scipy.interpolate',
              'Tools.Sessions.RewardSessions.DualRewardSession.lda': 'sklearn.lda',
              'Tools.Sessions.RewardSessions.DualRewardSession.linear_model': 'sklearn.linear_model',
              'Tools.Sessions.RewardSessions.DualRewardSession.linregress': 'scipy.stats.linregress',
              'Tools.Sessions.RewardSessions.DualRewardSession.neighbors': 'sklearn.neighbors',
              'Tools.Sessions.RewardSessions.DualRewardSession.pickle': 'pickle',
              'Tools.Sessions.RewardSessions.DualRewardSession.qda': 'sklearn.qda',
              'Tools.Sessions.RewardSessions.DualRewardSession.rfn': 'numpy.lib.recfunctions',
              'Tools.Sessions.RewardSessions.DualRewardSession.shell': 'IPython.embed',
              'Tools.Sessions.RewardSessions.DualRewardSession.spearmanr': 'scipy.stats.spearmanr',
              'Tools.Sessions.RewardSessions.DualRewardSession.svm': 'sklearn.svm',
              'Tools.Sessions.RewardSessions.SingleBBRewardSession.*': 'Tools.Sessions.RewardSessions.SingleRewardSession.*',
              'Tools.Sessions.RewardSessions.SingleBBRewardSession.datetime': 'datetime',
              'Tools.Sessions.RewardSessions.SingleBBRewardSession.pickle': 'pickle',
              'Tools.Sessions.RewardSessions.SingleBBRewardSession.shell': 'IPython.embed',
              'Tools.Sessions.RewardSessions.SingleRewardSession.*': 'scipy.stats.*',
              'Tools.Sessions.RewardSessions.SingleRewardSession.butter': 'scipy.signal.butter',
              'Tools.Sessions.RewardSessions.SingleRewardSession.correlate': 'scipy.signal.correlate',
              'Tools.Sessions.RewardSessions.SingleRewardSession.datetime': 'datetime',
              'Tools.Sessions.RewardSessions.SingleRewardSession.filtfilt': 'scipy.signal.filtfilt',
              'Tools.Sessions.RewardSessions.SingleRewardSession.interpolate': 'scipy.interpolate',
              'Tools.Sessions.RewardSessions.SingleRewardSession.linregress': 'scipy.stats.linregress',
              'Tools.Sessions.RewardSessions.SingleRewardSession.pickle': 'pickle',
              'Tools.Sessions.RewardSessions.SingleRewardSession.rfn': 'numpy.lib.recfunctions',
              'Tools.Sessions.RewardSessions.SingleRewardSession.rlc': 'rpy2.rlike.container',
              'Tools.Sessions.RewardSessions.SingleRewardSession.robjects': 'rpy2.robjects',
              'Tools.Sessions.RewardSessions.SingleRewardSession.shell': 'IPython.embed',
              'Tools.Sessions.RewardSessions.SingleRewardSession.signal': 'scipy.signal',
              'Tools.Sessions.RewardSessions.SingleRewardSession.spearmanr': 'scipy.stats.spearmanr',
              'Tools.Sessions.RewardSessions.SingleRewardSession.stats': 'scipy.stats',
              'Tools.Sessions.RewardSessions.VariableRewardSession.*': 'plotting_tools.*',
              'Tools.Sessions.RewardSessions.VariableRewardSession.datetime': 'datetime',
              'Tools.Sessions.RewardSessions.VariableRewardSession.pickle': 'pickle',
              'Tools.Sessions.RewardSessions.VariableRewardSession.shell': 'IPython.embed',
              'Tools.Sessions.RivalrySession.*': 'Tools.circularTools.*',
              'Tools.Sessions.RivalrySession.CoherenceAnalyzer': 'nitime.analysis.CoherenceAnalyzer',
              'Tools.Sessions.RivalrySession.CorrelationAnalyzer': 'nitime.analysis.CorrelationAnalyzer',
              'Tools.Sessions.RivalrySession.DecodingOperator': 'Operators.ArrayOperator.DecodingOperator',
              'Tools.Sessions.RivalrySession.Design': 'Operators.ImageOperator.Design',
              'Tools.Sessions.RivalrySession.TimeSeries': 'nitime.timeseries.TimeSeries',
              'Tools.Sessions.RivalrySession.drawgraph_channels': 'nitime.viz.drawgraph_channels',
              'Tools.Sessions.RivalrySession.drawmatrix_channels': 'nitime.viz.drawmatrix_channels',
              'Tools.Sessions.RivalrySession.nitime': 'nitime',
              'Tools.Sessions.RivalrySession.percent_change': 'nitime.utils.percent_change',
              'Tools.Sessions.RivalrySession.plot_xcorr': 'nitime.viz.plot_xcorr',
              'Tools.Sessions.RivalrySession.stats': 'scipy.stats',
              'Tools.Sessions.RivalrySession.viz': 'nitime.viz',
              'Tools.Sessions.RivalrySession7T.*': 'Tools.Operators.*',
              'Tools.Sessions.RivalrySession7T.GridSearchCV': 'sklearn.grid_search.GridSearchCV',
              'Tools.Sessions.RivalrySession7T.PCA': 'sklearn.decomposition.PCA',
              'Tools.Sessions.RivalrySession7T.PdfPages': 'matplotlib.backends.backend_pdf.PdfPages',
              'Tools.Sessions.RivalrySession7T.Project': 'Tools.Project',
              'Tools.Sessions.RivalrySession7T.SVC': 'sklearn.svm.SVC',
              'Tools.Sessions.RivalrySession7T.bn': 'bottleneck',
              'Tools.Sessions.RivalrySession7T.classification_report': 'sklearn.metrics.classification_report',
              'Tools.Sessions.RivalrySession7T.datasets': 'sklearn.datasets',
              'Tools.Sessions.RivalrySession7T.datetime': 'datetime',
              'Tools.Sessions.RivalrySession7T.fmri': 'nitime.fmri',
              'Tools.Sessions.RivalrySession7T.lda': 'sklearn.lda',
              'Tools.Sessions.RivalrySession7T.linear_model': 'sklearn.linear_model',
              'Tools.Sessions.RivalrySession7T.logging': 'logging',
              'Tools.Sessions.RivalrySession7T.mne': 'mne',
              'Tools.Sessions.RivalrySession7T.neighbors': 'sklearn.neighbors',
              'Tools.Sessions.RivalrySession7T.nitime': 'nitime',
              'Tools.Sessions.RivalrySession7T.norm': 'scipy.stats.norm',
              'Tools.Sessions.RivalrySession7T.np': 'numpy',
              'Tools.Sessions.RivalrySession7T.os': 'os',
              'Tools.Sessions.RivalrySession7T.pickle': 'pickle',
              'Tools.Sessions.RivalrySession7T.pl': 'matplotlib.pylab',
              'Tools.Sessions.RivalrySession7T.precision_score': 'sklearn.metrics.precision_score',
              'Tools.Sessions.RivalrySession7T.qda': 'sklearn.qda',
              'Tools.Sessions.RivalrySession7T.random': 'random',
              'Tools.Sessions.RivalrySession7T.recall_score': 'sklearn.metrics.recall_score',
              'Tools.Sessions.RivalrySession7T.shell': 'IPython.embed',
              'Tools.Sessions.RivalrySession7T.sklearn': 'sklearn',
              'Tools.Sessions.RivalrySession7T.sp': 'scipy',
              'Tools.Sessions.RivalrySession7T.subprocess': 'subprocess',
              'Tools.Sessions.RivalrySession7T.svm': 'sklearn.svm',
              'Tools.Sessions.RivalrySession7T.sys': 'sys',
              'Tools.Sessions.RivalrySession7T.tempfile': 'tempfile',
              'Tools.Sessions.RivalrySession7T.train_test_split': 'sklearn.cross_validation.train_test_split',
              'Tools.Sessions.Session.*': 'Operators.EyeOperator.*',
              'Tools.Sessions.Session.PdfPages': 'matplotlib.backends.backend_pdf.PdfPages',
              'Tools.Sessions.Session.datetime': 'datetime',
              'Tools.Sessions.Session.logging': 'logging',
              'Tools.Sessions.Session.logging.config': 'logging.config',
              'Tools.Sessions.Session.logging.handlers': 'logging.handlers',
              'Tools.Sessions.Session.math': 'math',
              'Tools.Sessions.Session.np': 'numpy',
              'Tools.Sessions.Session.os': 'os',
              'Tools.Sessions.Session.pickle': 'pickle',
              'Tools.Sessions.Session.pl': 'matplotlib.pylab',
              'Tools.Sessions.Session.pp': 'pp',
              'Tools.Sessions.Session.shell': 'IPython.embed',
              'Tools.Sessions.Session.sp': 'scipy',
              'Tools.Sessions.Session.sys': 'sys',
              'Tools.Sessions.VisualRewardSession.*': 'scipy.stats.*',
              'Tools.Sessions.VisualRewardSession.PdfPages': 'matplotlib.backends.backend_pdf.PdfPages',
              'Tools.Sessions.VisualRewardSession.butter': 'scipy.signal.butter',
              'Tools.Sessions.VisualRewardSession.correlate': 'scipy.signal.correlate',
              'Tools.Sessions.VisualRewardSession.datasets': 'sklearn.datasets',
              'Tools.Sessions.VisualRewardSession.datetime': 'datetime',
              'Tools.Sessions.VisualRewardSession.filtfilt': 'scipy.signal.filtfilt',
              'Tools.Sessions.VisualRewardSession.interpolate': 'scipy.interpolate',
              'Tools.Sessions.VisualRewardSession.itertools': 'itertools',
              'Tools.Sessions.VisualRewardSession.lda': 'sklearn.lda',
              'Tools.Sessions.VisualRewardSession.linear_model': 'sklearn.linear_model',
              'Tools.Sessions.VisualRewardSession.linregress': 'scipy.stats.linregress',
              'Tools.Sessions.VisualRewardSession.neighbors': 'sklearn.neighbors',
              'Tools.Sessions.VisualRewardSession.pickle': 'pickle',
              'Tools.Sessions.VisualRewardSession.qda': 'sklearn.qda',
              'Tools.Sessions.VisualRewardSession.rfn': 'numpy.lib.recfunctions',
              'Tools.Sessions.VisualRewardSession.rlc': 'rpy2.rlike.container',
              'Tools.Sessions.VisualRewardSession.robjects': 'rpy2.robjects',
              'Tools.Sessions.VisualRewardSession.shell': 'IPython.embed',
              'Tools.Sessions.VisualRewardSession.signal': 'scipy.signal',
              'Tools.Sessions.VisualRewardSession.spearmanr': 'scipy.stats.spearmanr',
              'Tools.Sessions.VisualRewardSession.stats': 'scipy.stats',
              'Tools.Sessions.VisualRewardSession.svm': 'sklearn.svm',
              'Tools.Subjects.DB.*': 'Tools.Subjects.Subject.*',
              'Tools.Subjects.DB.datetime': 'datetime',
              'Tools.Subjects.JB.*': 'Tools.Subjects.Subject.*',
              'Tools.Subjects.JB.datetime': 'datetime',
              'Tools.Subjects.JB_2.*': 'Tools.Subjects.Subject.*',
              'Tools.Subjects.JB_2.datetime': 'datetime',
              'Tools.Subjects.MB.*': 'Tools.Subjects.Subject.*',
              'Tools.Subjects.MB.datetime': 'datetime',
              'Tools.Subjects.Subject.*': 'itertools.*',
              'Tools.Subjects.Subject.np': 'numpy',
              'Tools.Subjects.Subject.os': 'os',
              'Tools.Subjects.Subject.pl': 'matplotlib.pylab',
              'Tools.Subjects.Subject.sp': 'scipy',
              'Tools.Subjects.Subject.subprocess': 'subprocess',
              'Tools.Subjects.Subject.sys': 'sys',
              'Tools.Subjects.TK.*': 'Tools.Subjects.Subject.*',
              'Tools.Subjects.TK.datetime': 'datetime',
              'Tools.Trial.*': 'Tools.Run.*',
              'Tools.Trial.np': 'numpy',
              'Tools.Trial.os': 'os',
              'Tools.Trial.pl': 'matplotlib.pylab',
              'Tools.Trial.sp': 'scipy',
              'Tools.Trial.sys': 'sys',
              'Tools.circularTools.*': 'math.*',
              'Tools.circularTools.fmin': 'scipy.optimize.fmin',
              'Tools.circularTools.np': 'numpy',
              'Tools.circularTools.pl': 'matplotlib.pylab',
              'Tools.circularTools.sp': 'scipy',
              'Tools.circularTools.vonmises': 'scipy.stats.vonmises',
              'Tools.functions_jw.MultipleLocator': 'matplotlib.ticker.MultipleLocator',
              'Tools.functions_jw.bottleneck': 'bottleneck',
              'Tools.functions_jw.cumtrapz': 'scipy.integrate.cumtrapz',
              'Tools.functions_jw.math': 'math',
              'Tools.functions_jw.np': 'numpy',
              'Tools.functions_jw.plt': 'matplotlib.pyplot',
              'Tools.functions_jw.random': 'random',
              'Tools.functions_jw.shell': 'IPython.embed',
              'Tools.functions_jw.signal': 'scipy.signal',
              'Tools.functions_jw.sp': 'scipy',
              'Tools.functions_jw.stats': 'scipy.stats',
              'Tools.log.*': 'subprocess.*',
              'Tools.log.logging': 'logging',
              'Tools.log.logging.config': 'logging.config',
              'Tools.log.logging.handlers': 'logging.handlers',
              'Tools.log.os': 'os',
              'Tools.log.sys': 'sys',
              'Tools.other_scripts.convert_flac_files.os': 'os',
              'Tools.other_scripts.convert_flac_files.subprocess': 'subprocess',
              'Tools.other_scripts.ipython.IPython.Shell': 'IPython.Shell',
              'Tools.other_scripts.join_labels.*': 'subprocess.*',
              'Tools.other_scripts.join_labels.os': 'os',
              'Tools.other_scripts.join_labels.sys': 'sys',
              'Tools.other_scripts.ols.c_': 'scipy.c_',
              'Tools.other_scripts.ols.det': 'scipy.linalg.det',
              'Tools.other_scripts.ols.diagonal': 'numpy.diagonal',
              'Tools.other_scripts.ols.diff': 'scipy.diff',
              'Tools.other_scripts.ols.division': '__future__.division',
              'Tools.other_scripts.ols.dot': 'scipy.dot',
              'Tools.other_scripts.ols.inv': 'scipy.linalg.inv',
              'Tools.other_scripts.ols.log': 'numpy.log',
              'Tools.other_scripts.ols.ones': 'scipy.ones',
              'Tools.other_scripts.ols.pi': 'numpy.pi',
              'Tools.other_scripts.ols.randn': 'numpy.random.randn',
              'Tools.other_scripts.ols.rpy': 'rpy',
              'Tools.other_scripts.ols.seed': 'numpy.random.seed',
              'Tools.other_scripts.ols.solve': 'scipy.linalg.solve',
              'Tools.other_scripts.ols.sqrt': 'numpy.sqrt',
              'Tools.other_scripts.ols.square': 'numpy.square',
              'Tools.other_scripts.ols.stats': 'scipy.stats',
              'Tools.other_scripts.ols.time': 'time'}}
